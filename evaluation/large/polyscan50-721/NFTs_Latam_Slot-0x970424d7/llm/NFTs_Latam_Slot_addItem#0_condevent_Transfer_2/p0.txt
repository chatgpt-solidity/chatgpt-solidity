Given a solidity function addItem and the related parts from a smart contract.
Whether it explicitly contains the given action? Reply in "YES" or "NO".



Function(and related parts) to audit:"""
pragma solidity 0.8.11;
abstract contract AccessControlUpgradeable is
    Initializable,
    ContextUpgradeable,
    IAccessControlUpgradeable,
    ERC165Upgradeable
{

    mapping(bytes32 => RoleData) private _roles;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account)
        public
        view
        virtual
        override
        returns (bool)
    {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        StringsUpgradeable.toHexString(account),
                        " is missing role ",
                        StringsUpgradeable.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }
}

contract NFTs_Latam_Slot is
    Initializable,
    INFTlatamContract,
    IOwnable,
    IRoyalty,
    IPrimarySale,
    IPlatformFee,
    ReentrancyGuardUpgradeable,
    EIP712Upgradeable,
    MulticallUpgradeable,
    AccessControlEnumerableUpgradeable,
    ERC721EnumerableUpgradeable,
    ITokenERC721
{
    /// @dev Only MINTER_ROLE holders can sign off on `MintRequest`s.
    bytes32 private constant MINTER_ROLE = keccak256("MINTER_ROLE");

    /// @dev The item ID of the next item to mint for the slotmachine.
    uint256 public nextItemIdToMint;

    /// @dev Mapping from tokenId => onchain
    mapping(uint256 => bytes) private onchainItems;

    /// @dev Lets an account with MINTER_ROLE mint an NFT.
    function addItem(string calldata _onchainItem)
        external
        onlyRole(MINTER_ROLE)
        returns (uint256)
    {
        // `_mintTo` is re-used. `mintTo` just adds a minter role check.
        return _addItem(_onchainItem);
    }

    /// @dev Mints an NFT to `to`
    function _addItem(string calldata _onchainItem)
        internal
        returns (uint256 itemIdToMint)
    {
        itemIdToMint = nextItemIdToMint;
        nextItemIdToMint += 1;

        onchainItems[itemIdToMint] = bytes(_onchainItem);

        emit ItemsMinted(itemIdToMint, bytes(base64Decode(_onchainItem)));
    }

    function base64Decode(string memory _base64str)
        internal
        pure
        returns (string memory)
    {
        bytes memory base64bytes = bytes(_base64str);
        uint256 padding = base64bytes.length % 4;
        if (padding > 0) {
            base64bytes = abi.encodePacked(
                base64bytes,
                abi.encodePacked((4 - padding) * 1)
            );
        }
        return string(base64bytes);
    }
}

library StringsUpgradeable {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length)
        internal
        pure
        returns (string memory)
    {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

abstract contract ContextUpgradeable is Initializable {

    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
"""

Action:"""
When `tokenId` is destroyed and removed from circulation.
"""
