Given a solidity function constructor and the related parts from a smart contract.
Whether it explicitly contains the given action? Reply in "YES" or "NO".



Function(and related parts) to audit:"""
pragma solidity 0.8.1;
abstract contract AccessControl is Context, IAccessControl, ERC165 {

    mapping(bytes32 => RoleData) private _roles;

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }
}

contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }
}

contract CCB23NFT is ERC721Enumerable, AccessControl, Ownable {
    mapping(uint256 => uint256) public editionSupply; // max supply for each edition



    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    constructor() ERC721("CADENCE CLUB Budapest 23", "CCB") {
    
        _grantRole(MINTER_ROLE, msg.sender);
        // set supply of initial editions
        editionSupply[1] = 333;
        editionSupply[2] = 333;
        editionSupply[3] = 333;
        editionSupply[4] = 333;
        editionSupply[5] = 333;
        editionSupply[6] = 333;
        editionSupply[7] = 333;
        editionSupply[8] = 333;
        editionSupply[9] = 333;
        editionSupply[10] = 6666;
    }
}
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
"""

Action:"""
when the approved address for an NFT is cleared
"""
