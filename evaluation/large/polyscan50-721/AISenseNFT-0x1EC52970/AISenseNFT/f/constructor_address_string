contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }
}

contract AISenseNFT is ERC721Enumerable, Ownable, ContractMetadata {

    Counters.Counter private tokenId;

    NftData[] public nftTypes;
    mapping(uint256 => uint256) public nftPrice;

    address public usdt;
    string public baseURI;

    constructor(
        address _usdt,
        string memory baseTokenURI
    ) ERC721("AISenseNFT", "AISNFT") {
        nftPrice[0] = 5;
        nftPrice[1] = 7;
        nftPrice[2] = 9;
        nftPrice[3] = 15;

        setBaseURI(baseTokenURI);
        string memory uriSuffix = ".json";

        // Initialize the NFT types
        nftTypes.push(
            NftData(
                3 minutes,
                nftPrice[0],
                string(
                    abi.encodePacked(_baseURI(), "/1-month-metadata", uriSuffix)
                )
            )
        ); // 1 month
        nftTypes.push(
            NftData(
                9 minutes,
                nftPrice[1],
                string(
                    abi.encodePacked(_baseURI(), "/3-month-metadata", uriSuffix)
                )
            )
        ); // 3 months
        nftTypes.push(
            NftData(
                18 minutes,
                nftPrice[2],
                string(
                    abi.encodePacked(_baseURI(), "/6-month-metadata", uriSuffix)
                )
            )
        ); // 6 months
        nftTypes.push(
            NftData(
                36 minutes,
                nftPrice[3],
                string(
                    abi.encodePacked(
                        _baseURI(),
                        "/12-month-metadata",
                        uriSuffix
                    )
                )
            )
        ); // 12 months

        // Set the USDT token
        usdt = _usdt;
        tokenId.increment();
    }

    function setBaseURI(string memory _baseTokenURI) public onlyOwner {
        baseURI = _baseTokenURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;

    }
    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library Counters {

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }
}

