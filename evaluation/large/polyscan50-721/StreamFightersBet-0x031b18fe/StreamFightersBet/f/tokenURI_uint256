abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    /**
     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
     */
    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
        return _owners[tokenId];
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _ownerOf(tokenId) != address(0);
    }
}

contract StreamFightersBet is ERC721, ReentrancyGuard {
    mapping (uint256 => string) private _tokenURIs;

    /*
    *  @notice  Fetches the URI for a token
    *  @dev     Retrieves the metadata URI of a given NFT token
    *  @param   tokenId The ID of the token
    *  @return  The metadata URI of the token
    */
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return _tokenURIs[tokenId];
    }
}
