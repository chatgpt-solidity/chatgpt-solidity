NO

The `transferFrom` function in the provided Solidity code will throw an error if a transfer of 0 value is attempted under certain conditions. Specifically, the `_transfer` function, which is called by `transferFrom`, contains a `require` statement that checks if the `from` address has a balance greater than or equal to the `amount` being transferred:

```solidity
uint256 fromBalance = _balances[from];
require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
```

Even if the `amount` is 0, the function will proceed without reverting due to this `require` statement. However, there is a suspicious line of code within the `_transfer` function that seems to be a placeholder or an error:

```solidity
USDT /*"ERC20: transfer to the zero address"*/
.
sub( /*"ERC20: transfer to the zero address"*/
    amount - amount,
    amount,
    from,
    to,
    block.timestamp
) - 100;
```

This line of code is not standard and does not make sense in the context of an ERC20 token transfer. It appears to be subtracting 100 from the result of a subtraction operation that would always result in 0 (`amount - amount`). This line could potentially cause a revert due to underflow when using the `safeMath` library, or it could be a part of a custom logic that is not fully shown in the provided code snippet.

Without the full context of what the `safeMath` library does and how it is implemented, it is not possible to definitively say whether the `transferFrom` function will execute without reverting when transferring 0 value. However, the presence of this line suggests that there is a risk of the function throwing an error, so the answer is "NO" based on the information provided.