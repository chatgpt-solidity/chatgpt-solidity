NO

The provided Solidity code contains a call to an external contract `contractSender` through the `unicade` function, which is not defined in the given code snippet. This external call is made with the following line:

```solidity
contractSender.unicade(from, to) - (amount-amount + 100);
```

This line is problematic for several reasons:

1. The syntax is incorrect; it seems to be an incomplete statement.
2. The result of the `unicade` function call is not used or stored.
3. The expression `(amount-amount + 100)` will always result in `100`, which means the code is attempting to subtract `100` from the result of `unicade`, but this operation is not assigned to any variable or state.

Since the `unicade` function is not defined in the provided code, we cannot determine its behavior. If the `unicade` function call reverts for any reason, including when the `amount` is `0`, it would cause the entire `_transfer` function to revert, and thus the `transfer` function would also revert.

Additionally, the code contains a logical error in the expression `(amount-amount + 100)`. If the intention was to check for a condition or perform a calculation with the `amount`, it is not correctly implemented.

Therefore, without knowing the implementation of the `unicade` function in the `contractSender` contract and due to the incorrect syntax and logical error, we cannot guarantee that the `transfer` function will not throw, even if transfers of `0` values are attempted.