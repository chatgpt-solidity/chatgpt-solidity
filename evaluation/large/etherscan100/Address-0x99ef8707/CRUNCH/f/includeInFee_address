abstract contract Ownable is Context {
    address private _owner;
    function owner() public view virtual returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
}

contract CRUNCH is Context, IERC20, Ownable {
    mapping (address => bool) private _isExcludedFromFee;
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

