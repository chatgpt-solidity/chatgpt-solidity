Given a solidity function setSwapAndLiquifyEnabled and the related parts from a smart contract.
Whether the function setSwapAndLiquifyEnabled and its related parts explicitly contains the condition? Reply in "YES" or "NO".

Function(and related parts) to audit:"""
contract CRUNCH is Context, IERC20, Ownable {
    bool public swapAndLiquifyEnabled = true;
    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }
}
abstract contract Ownable is Context {
    address private _owner;
    function owner() public view virtual returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
"""

Condition:"""
call any callee that returns (bool success)
"""
