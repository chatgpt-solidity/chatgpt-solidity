contract VARK is IERC20 {

    uint256 public buyTaxPercent = 1;
    uint256 public sellTaxPercent = 1;
    bool public taxesRemoved = false;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    function _applyTax(uint256 amount, uint256 taxPercent) internal pure returns (uint256) {
        return amount - (amount * taxPercent / 100);
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        
        uint256 finalAmount = amount;
        if (!taxesRemoved) {
            if (recipient == address(this) || recipient == address(0)) {
                finalAmount = _applyTax(amount, sellTaxPercent);
            } else {
                finalAmount = _applyTax(amount, buyTaxPercent);
            }
        }

        require(_balances[sender] >= finalAmount, "Insufficient balance");
        require(_allowances[sender][msg.sender] >= finalAmount, "Allowance exceeded");

        _balances[sender] -= finalAmount;
        _balances[recipient] += finalAmount;
        _allowances[sender][msg.sender] -= finalAmount;
        emit Transfer(sender, recipient, finalAmount);
        return true;
    }
}
