abstract contract Ownable is Context {
    address private _owner;
    function owner() public view virtual returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
}

contract ERC20Token is ERC20, Ownable {
    uint256 public lastLpBurnTime;
    bool public tradeStart = false;
    bool public swappingActivate = false;

    // once enabled, can never be turned off
    function tradingEnable() external onlyOwner {
        swappingActivate = true;
        tradeStart = true;
        lastLpBurnTime = block.timestamp;
    }
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

