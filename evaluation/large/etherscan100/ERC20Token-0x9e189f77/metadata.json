{
    "file": "evaluation/etherscan100/ERC20Token-0x9e189f77.sol",
    "contracts": [
        {
            "solc_version": "0.8.10",
            "func2file": {
                "owner() returns(address)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/owner",
                "renounceOwnership() returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/renounceOwnership",
                "transferOwnership(address) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/transferOwnership_address",
                "name() returns(string)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/name",
                "symbol() returns(string)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/symbol",
                "decimals() returns(uint8)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/decimals",
                "totalSupply() returns(uint256)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/totalSupply",
                "balanceOf(address) returns(uint256)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/balanceOf_address",
                "transfer(address,uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/transfer_address_uint256",
                "allowance(address,address) returns(uint256)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/allowance_address_address",
                "approve(address,uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/approve_address_uint256",
                "transferFrom(address,address,uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/transferFrom_address_address_uint256",
                "increaseAllowance(address,uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/increaseAllowance_address_uint256",
                "decreaseAllowance(address,uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/decreaseAllowance_address_uint256",
                "constructor() returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/constructor",
                "receive() returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/receive",
                "tradingEnable() returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/tradingEnable",
                "disableTransferDelays() returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/disableTransferDelays",
                "setSwapTokensAtAmount(uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/setSwapTokensAtAmount_uint256",
                "setMaxTxn(uint256) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/setMaxTxn_uint256",
                "setMaxWallet(uint256) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/setMaxWallet_uint256",
                "removeLimits() returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/removeLimits",
                "excludeFromMaxTransaction(address,bool) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/excludeFromMaxTransaction_address_bool",
                "updateBuyFees(uint256,uint256,uint256) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/updateBuyFees_uint256_uint256_uint256",
                "updateSellFees(uint256,uint256,uint256) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/updateSellFees_uint256_uint256_uint256",
                "excludeFromFees(address,bool) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/excludeFromFees_address_bool",
                "setAutomatedMarketMakerPair(address,bool) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/setAutomatedMarketMakerPair_address_bool",
                "updateMarketingWallet(address) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/updateMarketingWallet_address",
                "updateDevWallet(address) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/updateDevWallet_address",
                "isExcludedFromFees(address) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/isExcludedFromFees_address",
                "updateAutoLPBurnSettings(uint256,uint256,bool) returns()": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/updateAutoLPBurnSettings_uint256_uint256_bool",
                "manualBurnLiquidityPairTokens(uint256) returns(bool)": ".temp/etherscan100/ERC20Token-0x9e189f77/ERC20Token/f/manualBurnLiquidityPairTokens_uint256"
            },
            "func2attrs": {
                "owner() returns(address)": {
                    "is_view": true,
                    "is_pure": false
                },
                "renounceOwnership() returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "transferOwnership(address) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "name() returns(string)": {
                    "is_view": true,
                    "is_pure": false
                },
                "symbol() returns(string)": {
                    "is_view": true,
                    "is_pure": false
                },
                "decimals() returns(uint8)": {
                    "is_view": true,
                    "is_pure": false
                },
                "totalSupply() returns(uint256)": {
                    "is_view": true,
                    "is_pure": false
                },
                "balanceOf(address) returns(uint256)": {
                    "is_view": true,
                    "is_pure": false
                },
                "transfer(address,uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "allowance(address,address) returns(uint256)": {
                    "is_view": true,
                    "is_pure": false
                },
                "approve(address,uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "transferFrom(address,address,uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "increaseAllowance(address,uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "decreaseAllowance(address,uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "constructor() returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "receive() returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "tradingEnable() returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "disableTransferDelays() returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "setSwapTokensAtAmount(uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                },
                "setMaxTxn(uint256) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "setMaxWallet(uint256) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "removeLimits() returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "excludeFromMaxTransaction(address,bool) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "updateBuyFees(uint256,uint256,uint256) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "updateSellFees(uint256,uint256,uint256) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "excludeFromFees(address,bool) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "setAutomatedMarketMakerPair(address,bool) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "updateMarketingWallet(address) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "updateDevWallet(address) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "isExcludedFromFees(address) returns(bool)": {
                    "is_view": true,
                    "is_pure": false
                },
                "updateAutoLPBurnSettings(uint256,uint256,bool) returns()": {
                    "is_view": false,
                    "is_pure": false
                },
                "manualBurnLiquidityPairTokens(uint256) returns(bool)": {
                    "is_view": false,
                    "is_pure": false
                }
            },
            "state_var_sigs": [
                "maxWallet() returns(uint256)",
                "percentForLPBurn() returns(uint256)",
                "limitsInEffect() returns(bool)",
                "sellTotalFees() returns(uint256)",
                "transferDelayEnabled() returns(bool)",
                "deadAddress() returns(address)",
                "swappingActivate() returns(bool)",
                "_isExcludedMaxTransactionAmount(address) returns(bool)",
                "tokensForLiquidity() returns(uint256)",
                "uniswapV2Pair() returns(address)",
                "lastLpBurnTime() returns(uint256)",
                "buyMarketingFee() returns(uint256)",
                "lastManualLpBurnTime() returns(uint256)",
                "buyDevFee() returns(uint256)",
                "buyLiquidityFee() returns(uint256)",
                "swapTokensAtAmount() returns(uint256)",
                "maxTransactionAmount() returns(uint256)",
                "tokensForDev() returns(uint256)",
                "uniswapV2Router() returns(IUniswapV2Router02)",
                "automatedMarketMakerPairs(address) returns(bool)",
                "devWallet() returns(address)",
                "buyTotalFees() returns(uint256)",
                "tokensForMarketing() returns(uint256)",
                "tradeStart() returns(bool)",
                "sellDevFee() returns(uint256)",
                "sellLiquidityFee() returns(uint256)",
                "sellMarketingFee() returns(uint256)",
                "lpBurnFrequency() returns(uint256)",
                "manualBurnFrequency() returns(uint256)",
                "lpBurnEnabled() returns(bool)",
                "MarketingWallet() returns(address)"
            ],
            "ercs": [
                "20",
                "20token",
                "20metadata"
            ],
            "events": [
                {
                    "name": "Transfer",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "uint256",
                            "indexed": false
                        }
                    ]
                },
                {
                    "name": "Approval",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "uint256",
                            "indexed": false
                        }
                    ]
                },
                {
                    "name": "OwnershipTransferred",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "address",
                            "indexed": true
                        }
                    ]
                },
                {
                    "name": "UpdateUniswapV2Router",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "address",
                            "indexed": true
                        }
                    ]
                },
                {
                    "name": "ExcludeFromFees",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "bool",
                            "indexed": false
                        }
                    ]
                },
                {
                    "name": "SetAutomatedMarketMakerPair",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "bool",
                            "indexed": true
                        }
                    ]
                },
                {
                    "name": "MarketingWalletUpdated",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "address",
                            "indexed": true
                        }
                    ]
                },
                {
                    "name": "devWalletUpdated",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "type": "address",
                            "indexed": true
                        }
                    ]
                },
                {
                    "name": "SwapAndLiquify",
                    "params": [
                        {
                            "type": "uint256",
                            "indexed": false
                        },
                        {
                            "type": "uint256",
                            "indexed": false
                        },
                        {
                            "type": "uint256",
                            "indexed": false
                        }
                    ]
                },
                {
                    "name": "AutoNukeLP",
                    "params": []
                },
                {
                    "name": "ManualNukeLP",
                    "params": []
                },
                {
                    "name": "isbot",
                    "params": [
                        {
                            "type": "address",
                            "indexed": true
                        }
                    ]
                }
            ],
            "name": "ERC20Token"
        }
    ]
}