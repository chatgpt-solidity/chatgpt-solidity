Given a solidity function transferFrom and the related parts from a smart contract.
Whether the function transferFrom throws unless the _from account has deliberately authorized the sender of the message via some mechanism? Reply in "YES" or "NO"
Note: returning false is not throwing.

Example of authorization mechanism:
Example:"""
contract {
    function transferFrom(address sender, address recipient, uint256 amount) {
        transfer(...);
        _allowances[sender][msg.sender] -= amount;
        // omit other codes
    }
}
"""



Function(and related parts) to audit:"""
contract BabyShark is IERC20 {

    mapping(address => uint256) balances;
    mapping(address => mapping (address => uint256)) allowed;

    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {
        require(numTokens <= balances[owner]);
        require(numTokens <= allowed[owner][msg.sender]);

        balances[owner] = balances[owner].sub(numTokens);
        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);
        balances[buyer] = balances[buyer].add(numTokens);
        emit Transfer(owner, buyer, numTokens);
        return true;
    }
}

library SafeMath {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
      assert(b <= a);
      return a - b;

    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
      uint256 c = a + b;
      assert(c >= a);
      return c;
    }
}
"""
