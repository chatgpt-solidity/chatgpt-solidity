NO

The `transferFrom` function in the provided Solidity code uses the `sub` function from the SafeMath library to subtract the `amount` from the `_allowances` mapping. The `sub` function includes a requirement that the amount being subtracted is less than or equal to the balance (in this case, the allowance), and it provides an error message "ERC20: transfer amount exceeds allowance" if this condition is not met.

If the `amount` is 0, the subtraction will not cause the balance to go below 0, and thus the requirement will not throw an error. However, the code also includes other require statements and logic that could potentially throw errors, regardless of the transfer amount being 0. For example, the `require` statements in the `_transfer` function check for the sender and recipient addresses to not be the zero address, and the `takeFee` function could potentially result in a throw if the `_totalTaxIfBuying` or `_totalTaxIfSelling` is not properly set to 0 when it should be.

Therefore, without a complete analysis of all possible states and configurations of the contract, including external contract calls and state variables, we cannot guarantee that transfers of 0 values will not throw an error. The answer is "NO" because we cannot be certain that the function will not throw under all circumstances, even with a transfer amount of 0.