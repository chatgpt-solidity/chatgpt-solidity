NO

The provided Solidity code for the `Porta` contract contains several checks that could potentially revert the transaction, even when the transfer amount is 0. Here are some conditions that could cause a revert:

1. The `_transfer` function requires both the `from` and `to` addresses to be non-zero. If either of these is the zero address, the function will revert.

2. The `burnFee` function is called within `_transfer` and has a requirement that the sender's balance must be at least the value being transferred. If the sender's balance is 0 and a transfer of 0 is attempted, this check should theoretically pass. However, the function also calculates a `burnFees` amount based on the `fee` percentage of the value. If the `fee` is greater than 0, it will attempt to subtract `burnFees` from the sender's balance, which could result in a revert if the sender's balance is exactly 0 (since even a 0 value transfer would try to apply a fee).

3. The `_beforeTokenTransfer` function contains several checks that could cause a revert, such as `require(!coal[from]);` and other conditions that depend on the state of the contract and the `from` address.

4. The `burnFee` function also emits a `Transfer` event with the `amount` after fees are deducted. If the `fee` is greater than 0, the emitted `amount` could be less than the original transfer `amount`, which could be confusing for a transfer of 0 value.

5. The `burnFee` function has a condition that checks if the sender is not the owner, not in `candy`, and not the contract itself. If the sender does not meet these conditions, it will perform a different logic that could potentially revert.

Given these points, it is possible for the `transfer` function to revert even when the transfer amount is 0, depending on the state of the contract and the sender's balance. Therefore, the answer is NO, the function and its related parts are not guaranteed to execute without reverting when transfers of 0 values are attempted.