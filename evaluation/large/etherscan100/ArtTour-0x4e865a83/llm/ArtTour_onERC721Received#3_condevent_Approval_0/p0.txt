Given a solidity function onERC721Received and the related parts from a smart contract.
Whether it explicitly contains the given action? Reply in "YES" or "NO".



Function(and related parts) to audit:"""
pragma solidity 0.8.21;
contract ArtTour is FomoMofo, ERC165, Ownable, ReentrancyGuard {

    address public _fomoMofo;

    bool public stakingIsEnabled;
    mapping(uint256 => StakedOwner) private _owners;

    mapping(address => uint256) private _balances;
    mapping(uint256 => uint256) private stakingStarted;

    function onERC721Received(
        address,
        address from,
        uint256 tokenId,
        bytes calldata
    ) external override nonReentrant returns (bytes4) {
        require(stakingIsEnabled, "Staking is not enabled.");
        require(msg.sender == _fomoMofo, "FOMO MOFO's ONLY");

        stakingStarted[tokenId] = block.timestamp;
        _owners[tokenId] = StakedOwner(from, uint48(block.timestamp));
        unchecked {
            _balances[from] += 1;
        }
        emit Transfer(address(0), from, tokenId);

        return this.onERC721Received.selector;
    }
}

abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;

    uint256 private constant _ENTERED = 2;
    uint256 private _status;

    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}
"""

Action:"""
when the approved address for an NFT is changed or reaffirmed
"""
