abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;


    uint256 private _status;
    constructor() {
        _status = _NOT_ENTERED;
    }
}

contract ArtTour is FomoMofo, ERC165, Ownable, ReentrancyGuard {

    address public _fomoMofo;
    string private _name;
    string private _symbol;
    string public baseURI;
    bool public stakingIsEnabled;

    constructor(address fomoMofo) Ownable(msg.sender) {
        _fomoMofo = fomoMofo;
        _symbol = "ArtTour";
        _name = "Fomo Mofo ArtTour";
        baseURI = "ipfs://Qme1vxGNw9Wuh7RM3y6p5VvQWzui1gyMb3RfLoWcst3M8n/";
        stakingIsEnabled = false;
    }
}

