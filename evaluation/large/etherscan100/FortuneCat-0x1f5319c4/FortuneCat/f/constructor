contract Ownable is Context {
    address private _owner;
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

contract FortuneCat is Context, IERC20, Ownable {
    mapping(address => uint256) private _rOwned;
    mapping(address => bool) private _isExcludedFromFee;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    address payable private _developmentAddres = payable(msg.sender); 
    address payable private _marketingAddres = payable(msg.sender);
    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    uint256 private constant _tTotal = 10 ** 9 * 10**9;
    constructor() { 
        _rOwned[_msgSender()] = _rTotal;
 
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
 
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_developmentAddres] = true;
        _isExcludedFromFee[_marketingAddres] = true;
 
        emit Transfer(address(0), _msgSender(), _tTotal);
    }
}
