Given a solidity function setStructure and the related parts from a smart contract.
Whether it explicitly contains the given action? Reply in "YES" or "NO".

Example of "initial token distribution" are provided below. 
Example:"""
construct <Contract Name> {
    constructor() {
        // tokens are transfer during the initial token distribution:
        balances[msg.sender] = total;
    }
}
"""



Function(and related parts) to audit:"""
pragma solidity 0.8.19;
abstract contract Ownable {
    address internal owner;
    modifier onlyOwner() {require(isOwner(msg.sender), "!OWNER"); _;}
    function isOwner(address account) public view returns (bool) {return account == owner;}
}

library SafeMath {
    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}
        unchecked{require(b > 0, errorMessage); return a % b;}}}

contract zepump is IERC20, tokenStaking, Ownable {
    uint256 private liquidityFee = 0;
    uint256 private marketingFee = 200;
    uint256 private developmentFee = 200;
    uint256 private stakingFee = 0;
    uint256 private tokenFee = 0;
    uint256 private totalFee = 1000;
    uint256 private sellFee = 2000;
    uint256 private transferFee = 4000;
    uint256 private denominator = 10000;

    function setStructure(uint256 _liquidity, uint256 _marketing, uint256 _token, uint256 _development, uint256 _staking, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {
        liquidityFee = _liquidity; marketingFee = _marketing; tokenFee = _token; stakingFee = _staking;
        developmentFee = _development; totalFee = _total; sellFee = _sell; transferFee = _trans;
        require(totalFee <= denominator.div(5) && sellFee <= denominator.div(5) && transferFee <= denominator.div(5), "ERC20: fees cannot be more than 20%");
        emit SetStructure(_total, _sell, _trans, block.timestamp);
    }
}
"""

Action:"""
tokens are transferred during the initial token distribution or crowdsale.
"""
