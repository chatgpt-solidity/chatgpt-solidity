YES

The `safeTransferFrom` function in the provided Solidity code correctly emits the `TransferSingle` event according to the given rule. The event is emitted with the `_to` argument being the address of the recipient whose balance is increased by the `amount` of tokens of type `id`.

Here's the relevant part of the code that shows the `TransferSingle` event being emitted with the correct arguments:

```solidity
function _safeTransferFrom(
    address from,
    address to,
    uint256 id,
    uint256 amount,
    bytes memory data
) internal virtual {
    require(to != address(0), "ERC1155: transfer to the zero address");

    address operator = _msgSender();

    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);

    uint256 fromBalance = _balances[id][from];
    require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
    unchecked {
        _balances[id][from] = fromBalance - amount;
    }
    _balances[id][to] += amount;

    emit TransferSingle(operator, from, to, id, amount);

    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
}
```

In the `_safeTransferFrom` function, the `to` argument is checked to ensure it is not the zero address, and the balance of the `from` address for the token `id` is checked to ensure it has enough tokens to transfer. The balance of the `from` address is then decreased by `amount`, and the balance of the `to` address is increased by the same `amount`. Finally, the `TransferSingle` event is emitted with the `operator` (the message sender), `from`, `to`, `id`, and `amount` as arguments, which aligns with the rule that the `_to` argument must be the address of the recipient whose balance is increased.