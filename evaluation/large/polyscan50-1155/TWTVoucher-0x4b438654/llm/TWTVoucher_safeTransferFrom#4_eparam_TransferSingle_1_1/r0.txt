YES

The `safeTransferFrom` function in the provided Solidity code correctly emits the `TransferSingle` event according to the given rule. The `_from` argument in the `TransferSingle` event is indeed the address of the holder whose balance is decreased. This is ensured by the following lines of code:

```solidity
uint256 fromBalance = _balances[id][from];
require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
unchecked {
    _balances[id][from] = fromBalance - amount;
}
_balances[id][to] += amount;

emit TransferSingle(operator, from, to, id, amount);
```

The `from` variable is used to check the balance and decrease it accordingly before the `TransferSingle` event is emitted. The `operator` is the address that initiated the transfer, which could be the token owner or an approved operator. The `to` variable is the recipient's address, `id` is the token type, and `amount` is the number of tokens to transfer. The event is emitted with the correct `_from` argument as required by the rule.