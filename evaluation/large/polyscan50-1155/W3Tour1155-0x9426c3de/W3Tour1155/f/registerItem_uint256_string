contract W3Tour1155 is ERC1155, AccessControl {
    Counters.Counter private _itemCounter;

    mapping(uint256 => Item) _items;

    function registerItem (uint256 _maxSupply, string calldata _metadata)  external {
        require (hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "not authorized");
        require (_maxSupply > 0, "max supply is not specified");

        _itemCounter.increment();

        uint256 itemId = _itemCounter.current();
        Item memory _item;
        _item.date = block.timestamp;
        _item.metadata = _metadata;
        _item.maxSupply = _maxSupply;
        _items[itemId] = _item;

        emit W3ItemRegistered(itemId, _maxSupply, _metadata);
    }
}
abstract contract AccessControl is Context, IAccessControl, ERC165 {


    mapping(bytes32 => RoleData) private _roles;
    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }
}

library Counters {

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;

    }
    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }
}

