YES

The `safeTransferFrom` function in the provided Solidity code correctly emits the `TransferSingle` event according to the given rule. The `_id` argument in the `TransferSingle` event is set to the token type being transferred, which is the `id` parameter of the `_safeTransferFrom` internal function. This `id` is passed through from the `safeTransferFrom` public function, which is the external interface that would be called to initiate a transfer.

The `TransferSingle` event is emitted with the correct arguments after the token balance update and before the `_doSafeTransferAcceptanceCheck` function is called, which ensures that the `to` address is capable of receiving the tokens if it is a contract.

Here is the relevant part of the code that confirms the `TransferSingle` event is emitted with the correct `_id`:

```solidity
function _safeTransferFrom(
    address from,
    address to,
    uint256 id,
    uint256 amount,
    bytes memory data
) internal virtual {
    // ... (omitted code for brevity)

    _balances[id][to] += amount;

    emit TransferSingle(operator, from, to, id, amount);

    // ... (omitted code for brevity)
}
```

The `id` variable is used as the `_id` argument in the `TransferSingle` event, which matches the rule that "_The `_id` argument MUST be the token type being transferred._"