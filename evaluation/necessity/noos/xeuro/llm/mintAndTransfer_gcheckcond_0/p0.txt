Given a solidity function mintAndTransfer and the related parts from a smart contract.
Whether the function mintAndTransfer and its related parts explicitly contains the condition? Reply in "YES" or "NO".

Function(and related parts) to audit:"""
library SafeMath {

    /**
     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;

    }
    /**
     * @dev Adds two unsigned integers, reverts on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
}

contract xEuro {

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#totalsupply
    // function totalSupply() constant returns (uint256 totalSupply)
    // we start with zero

    uint256 public totalSupply = 0;
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof
    // function balanceOf(address _owner) constant returns (uint256 balance)
    mapping(address => uint256) public balanceOf;

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance
    // function allowance(address _owner, address _spender) constant returns (uint256 remaining)
    mapping(address => mapping(address => uint256)) public allowance;

    // addresses allowed to mint tokens:

    mapping(address => bool) public canMint;
    // addresses allowed to transfer tokens from contract's own address:
    mapping(address => bool) public canTransferFromContract;

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool) {
        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)
        require(_value >= 0);

        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism
        require(
            msg.sender == _from ||
                _value <= allowance[_from][msg.sender] ||
                (_from == address(this) && canTransferFromContract[msg.sender])
        );

        // check if _from account have required amount
        require(_value <= balanceOf[_from]);

        if (_to == address(this)) {
            // (!) only token holder can send tokens to smart contract to get fiat, not using allowance
            require(_from == msg.sender);
        }

        balanceOf[_from] = balanceOf[_from].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);

        // If allowance used, change allowances correspondingly
        if (_from != msg.sender && _from != address(this)) {
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(
                _value
            );
        }

        if (_to == address(this) && _value > 0) {
            require(_value >= minExchangeAmount);

            tokensInEventsCounter++;
            tokensInTransfer[tokensInEventsCounter].from = _from;
            tokensInTransfer[tokensInEventsCounter].value = _value;
            tokensInTransfer[tokensInEventsCounter].receivedOn = now;

            emit TokensIn(_from, _value, tokensInEventsCounter);
        }

        emit Transfer(_from, _to, _value);

        return true;
    }

    uint256 minExchangeAmount = 12; // xEuro tokens

    /* ---------- Create and burn tokens  */

    /* -- Accounting: exchange fiat to tokens (fiat sent to our bank acc with eth acc in reference > tokens ) */
    uint public mintTokensEventsCounter = 0; //
    //  keep all fiat tx ids, to prevent minting tokens twice (or more times) for the same fiat tx

    mapping(uint256 => bool) public fiatInPaymentIds;
    // here we can find a MintTokensEvent by fiatInPaymentId,
    // so we now if tokens were minted for given incoming fiat payment
    mapping(uint256 => MintTokensEvent) public fiatInPaymentsToMintTokensEvent;

    // here we store MintTokensEvent with its ordinal numbers
    mapping(uint256 => MintTokensEvent) public mintTokensEvent; //

    // tokens should be minted to contracts own address, (!) after that tokens should be transferred using transferFrom
    function mintTokens(
        uint256 value,
        uint256 fiatInPaymentId
    ) public returns (bool) {
        require(canMint[msg.sender]);

        // require that this fiatInPaymentId was not used before:
        require(!fiatInPaymentIds[fiatInPaymentId]);

        require(value >= 0);
        // <<< this is the moment when new tokens appear in the system
        totalSupply = totalSupply.add(value);
        // first token holder of fresh minted tokens is the contract itself
        balanceOf[address(this)] = balanceOf[address(this)].add(value);

        mintTokensEventsCounter++;
        mintTokensEvent[mintTokensEventsCounter].mintedBy = msg.sender;
        mintTokensEvent[mintTokensEventsCounter]
            .fiatInPaymentId = fiatInPaymentId;
        mintTokensEvent[mintTokensEventsCounter].value = value;
        mintTokensEvent[mintTokensEventsCounter].on = block.timestamp;
        mintTokensEvent[mintTokensEventsCounter]
            .currentTotalSupply = totalSupply;
        //
        fiatInPaymentsToMintTokensEvent[fiatInPaymentId] = mintTokensEvent[
            mintTokensEventsCounter
        ];

        emit TokensMinted(
            msg.sender,
            fiatInPaymentId,
            value,
            totalSupply,
            mintTokensEventsCounter
        );

        fiatInPaymentIds[fiatInPaymentId] = true;

        return true;

    }
    // requires msg.sender be both 'canMint' and 'canTransferFromContract'
    function mintAndTransfer(
        uint256 _value,
        uint256 fiatInPaymentId,
        address _to
    ) public returns (bool) {
        if (
            mintTokens(_value, fiatInPaymentId) &&
            transferFrom(address(this), _to, _value)
        ) {
            return true;
        }
        return false;
    }

    /* -- Accounting: exchange tokens to fiat (tokens sent to contract owns address > fiat payment) */
    uint public tokensInEventsCounter = 0; //
    mapping(uint256 => TokensInTransfer) public tokensInTransfer; //
}
"""

Condition:"""
call any callee that returns (bool success)
"""
