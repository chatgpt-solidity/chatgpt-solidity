contract KIMEX is Owner {

    mapping(address => uint256) internal balances;

    address public adminAddress;
    bool public inActive;

    uint256 public totalRemainingTokensForSales; // Total tokens remaining for sales

    modifier isActive() {
        require(inActive == false);
        _;
    }

    modifier onlyOwnerOrAdmin() {
        require(msg.sender == owner || msg.sender == adminAddress);
        _;
    }

    // Allocate sales tokens
    function allocateSalesTokens(
        address _addr,
        uint _amount
    ) external isActive onlyOwnerOrAdmin {
        require(_amount > 0);
        require(_addr != address(0));

        balances[_addr] = balances[_addr].add(_amount);
        totalRemainingTokensForSales = totalRemainingTokensForSales.sub(
            _amount
        );
        emit AllocateSalesTokens(_addr, _amount);
    }
}

contract Owner {
    address public owner;
}

library SafeMath {

    /**
     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    /**
     * @dev Adds two numbers, throws on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

