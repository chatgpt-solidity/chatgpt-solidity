YES

The provided Solidity interfaces include a function with the signature `transfer(address,uint256)` within the `BNB` contract. The function is defined as follows:

```solidity
function transfer(address _to, uint256 _value) {
    // ... function implementation ...
}
```

This function matches the interface "transfer(address,uint256) returns(bool)" in terms of parameter types (`address` and `uint256`). However, the return type is not explicitly specified in the function definition. In Solidity, if the return type is not specified, it is assumed to be `void`, which means the function does not return anything.

Despite the lack of an explicit return type in the function definition, the context of the code suggests that the function is intended to return a boolean value, as it is a common pattern for ERC-20 token `transfer` functions to return a boolean indicating success. This is further supported by the presence of other functions in the contract, such as `approve`, `burn`, `freeze`, and `unfreeze`, which do explicitly return a boolean value.

Given the common practice and the context, it is reasonable to assume that the `transfer` function is intended to return a boolean value, even though it is not explicitly stated in the provided interface. Therefore, the answer is "YES", assuming the intent is to match the common ERC-20 `transfer` function pattern.