YES

The provided Solidity function `_transfer` and its related parts violate the ERC rule that states "Transfers of 0 values MUST be treated as normal transfers." The reason for this is that the function `_transfer` includes the following line:

```solidity
require(balanceOf[_from] > _value); // Check if the sender has enough
```

This line requires that the sender's balance must be strictly greater than the value they are attempting to transfer. As a result, if `_value` is 0, this condition will fail for any non-zero balance, and the transfer will not be executed. This behavior is in violation of the ERC rule that requires transfers of 0 values to be treated as normal transfers. The correct condition should be `>=` instead of `>` to allow for 0-value transfers:

```solidity
require(balanceOf[_from] >= _value); // Check if the sender has enough
```

Additionally, the provided code snippet is missing the event declaration for `Transfer`, which should be included in an ERC-20 compliant token contract:

```solidity
event Transfer(address indexed _from, address indexed _to, uint256 _value);
```

This event must be emitted on successful transfers, including 0-value transfers, according to the ERC-20 standard.