NO

The provided `transferFrom` function in the `StandardToken` contract does not explicitly return a value. According to the ERC20 standard, the `transferFrom` function should return a boolean value indicating whether the transfer was successful.

The ERC20 `transferFrom` function signature should look like this:

```solidity
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
```

However, in the provided code, the `transferFrom` function does not have a return type specified, and there is no `return` statement within the function body. Therefore, it does not comply with the ERC rule that requires the function to return whether the transfer is successful.

To comply with the ERC20 standard, the function should be modified to return a boolean value, like so:

```solidity
function transferFrom(
    address _from,
    address _to,
    uint _value
) public onlyPayloadSize(3 * 32) returns (bool) {
    var _allowance = allowed[_from][msg.sender];

    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
    // if (_value > _allowance) throw;

    balances[_to] = balances[_to].add(_value);
    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    Transfer(_from, _to, _value);
    return true;
}
```

Note that the `throw` keyword is deprecated in newer versions of Solidity, and it is recommended to use `require` for assertions instead. The `throw` keyword has been replaced by `revert()`, `require()`, and `assert()` in Solidity 0.4.13 and later.