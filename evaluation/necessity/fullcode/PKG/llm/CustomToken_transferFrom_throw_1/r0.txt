NO

The `transferFrom` function in the provided Solidity code does not explicitly check for transfers of 0 values. The function will not throw an error if `_value` is 0; it will simply deduct 0 from the `allowance` and call `_transfer`, which also does not have a check for 0 value transfers. The function will return `true` without any state changes related to balances (since subtracting 0 does not change the balance).

Here's the relevant part of the `transferFrom` function:

```solidity
function transferFrom(
    address _from,
    address _to,
    uint256 _value
) public returns (bool success) {
    require(_value <= allowance[_from][msg.sender]); // Does not fail if _value is 0
    allowance[_from][msg.sender] -= _value; // Subtracting 0 is a no-op
    _transfer(_from, _to, _value); // _transfer does not fail on 0 value
    return true;
}
```

And the `_transfer` function:

```solidity
function _transfer(address _from, address _to, uint _value) internal {
    require(_to != 0x0);
    require(balanceOf[_from] >= _value); // Does not fail if _value is 0 and balance is non-negative
    require(balanceOf[_to] + _value >= balanceOf[_to]); // This check will pass for 0 value
    // ... rest of the function ...
}
```

In both functions, there are no conditions that would cause a throw or revert if `_value` is 0. Therefore, the answer to whether the function will throw if the given condition (transfers of 0 values) exists is "NO".