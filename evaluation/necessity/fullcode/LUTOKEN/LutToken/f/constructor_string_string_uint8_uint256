contract LutToken is
    LutTokenInterface,
    UpgradeableToken,
    DetailedERC20,
    BurnableToken,
    Pausable
{

    constructor(
        string _name,
        string _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    )
        public
        UpgradeableToken(msg.sender)
        DetailedERC20(_name, _symbol, _decimals)
    {
        totalSupply_ = _totalSupply;
        balances[msg.sender] = totalSupply_;
    }
}

contract BasicToken is ERC20Basic {

    mapping(address => uint256) balances;

    uint256 totalSupply_;
}

contract Ownable {
    address public owner;

    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    constructor() public {
        owner = msg.sender;
    }
}

contract DetailedERC20 is ERC20 {
    string public name;
    string public symbol;

    uint8 public decimals;
    constructor(string _name, string _symbol, uint8 _decimals) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }
}

contract UpgradeableToken is StandardToken {

    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */
    address public upgradeMaster;

    /**
     * Do not allow construction without upgrade master set.
     */
    constructor(address _upgradeMaster) public {
        upgradeMaster = _upgradeMaster;
    }
}

