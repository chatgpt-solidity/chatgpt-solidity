NO

The code provided does implement a `transfer` function that returns a boolean indicating whether the transfer is successful. However, the code does not compile due to several issues:

1. The `SafeMath` library functions are marked as `internal`, but they do not specify the `pure` or `view` keyword, which is required for functions that do not modify the state.

2. The `transfer` function in the `CMBToken` contract does not specify a visibility modifier (e.g., `public` or `external`). It should be marked as `public` to be callable by external entities.

3. The `Transfer` event is called without being declared. According to the ERC-20 standard, there should be an event declaration like `event Transfer(address indexed from, address indexed to, uint256 value);`.

4. The `IERC20` interface is referenced but not provided in the code snippet. The `CMBToken` contract should implement all functions from the `IERC20` interface to be compliant.

5. The `transfer` function should use the `emit` keyword to emit the `Transfer` event as per the Solidity version 0.4.21 and above.

6. The `SafeMath` functions should return values with the `pure` keyword since they do not modify the state and only perform calculations.

7. The `transfer` function should have a `return` statement at the end to return the success status, which it does, but due to the compilation issues, the code as it stands would not work correctly.

While the intent of the code is to return whether the transfer is successful, and it does have a return statement for that purpose, the code will not work as intended without fixing the compilation issues. Therefore, the answer is "NO" because the code, in its current state, violates the ERC rule by not being able to compile and execute successfully.