NO

The provided Solidity code does not fully comply with the ERC rule stated. While the `transfer` function does return a boolean indicating whether the transfer is successful, the code does not compile as per the latest Solidity standards for several reasons:

1. The `Transfer` event is not defined in the provided code snippet. According to ERC-20, there should be an event declaration like `event Transfer(address indexed from, address indexed to, uint256 value);`.

2. The `returns` keyword should be followed by the `public` visibility specifier to indicate that the function can be called externally. The correct function signature should be `function transfer(address _to, uint256 _value) public returns (bool success)`.

3. The `Transfer` event should be emitted using the `emit` keyword, which is missing in the provided code. The correct way to emit the event is `emit Transfer(msg.sender, _to, _value);`.

4. The code does not include the `Token` contract from which `StandardToken` is inheriting. Without the context of the `Token` contract, it's unclear whether other ERC-20 functions and events are properly implemented.

5. The code uses an old version of Solidity syntax. In newer versions of Solidity, the function should be marked as `external` if it is meant to be called from outside the contract, and the `returns` clause should specify the type of the returned value.

Please note that the ERC-20 standard requires a `transfer` function to return a boolean value indicating the success of the operation, which this function does. However, due to the reasons mentioned above, the code does not fully comply with the ERC-20 standard or modern Solidity best practices.