YES

The given Solidity code does not explicitly throw an error message stating that the caller's account balance does not have enough tokens to spend. Instead, it performs a check to see if the sender has enough balance and if the addition of the value to the recipient's balance does not overflow. If either of these conditions is not met, the function simply returns false without providing a specific error message. 

To comply with the given ERC rule, the code should be modified to include a require statement or revert with an error message when the sender does not have enough balance. Here is an example of how the code could be modified to comply with the rule:

```solidity
function transfer(address _to, uint _value) returns (bool) {
    require(balances[msg.sender] >= _value, "Caller's account balance does not have enough tokens to spend");

    // Check for overflows
    require(balances[_to] + _value >= balances[_to], "Overflow detected");

    balances[msg.sender] -= _value;
    balances[_to] += _value;
    Transfer(msg.sender, _to, _value);
    return true;
}
```

In this modified version, the `require` statements will throw an error with the specified message if the conditions are not met, which aligns with the given ERC rule.