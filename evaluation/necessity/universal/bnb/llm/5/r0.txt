NO

The provided Solidity code does not directly violate the given ERC rule. The rule states that the `_from` account must have authorized the sender of the message via some mechanism. In the code, the `transferFrom` function checks whether the `_value` is greater than the allowance that `_from` has given to `msg.sender`:

```solidity
if (_value > allowance[_from][msg.sender]) throw; // Check allowance
```

This line ensures that the `msg.sender` has been authorized by `_from` to transfer the specified amount (`_value`) of tokens. If `msg.sender` has not been authorized for at least `_value` tokens, the transaction will fail, and the tokens will not be transferred. This is a common mechanism in ERC-20 tokens to allow for delegated transfers, where the `_from` account approves another account (in this case, `msg.sender`) to transfer tokens on its behalf.

However, the code uses the outdated `throw` statement for error handling, which has been replaced by `require`, `assert`, and `revert` in newer versions of Solidity. The `throw` statement consumes all remaining gas, while the newer error handling functions allow for more gas-efficient and descriptive error handling.