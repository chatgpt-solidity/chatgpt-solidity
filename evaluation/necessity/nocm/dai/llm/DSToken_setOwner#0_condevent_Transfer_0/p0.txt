Given a solidity function setOwner and the related parts from a smart contract.
Whether the function setOwner and the related parts violate the rule? Replay in "YES" or "NO".
Notes: Before Solidity version 0.5, events are emitting without "emit" keyword.

Example of "initial token distribution" are provided below. 
Example:"""
construct <Contract Name> {
    constructor() {
        // tokens are transfer during the initial token distribution:
        balances[msg.sender] = total;
    }
}
"""



Function(and related parts) to audit:"""
pragma solidity 0.4.17;
contract DSAuth is DSAuthEvents {
    DSAuthority public authority;
    address public owner;

    function setOwner(address owner_) public auth {
        owner = owner_;
        LogSetOwner(owner);
    }

    modifier auth() {
        require(isAuthorized(msg.sender, msg.sig));
        _;
    }

    function isAuthorized(
        address src,
        bytes4 sig
    ) internal view returns (bool) {
        if (src == address(this)) {
            return true;
        } else if (src == owner) {
            return true;
        } else if (authority == DSAuthority(0)) {
            return false;
        } else {
            return authority.canCall(src, this, sig);
        }
    }
}
"""

Rule:"""
Emit Transfer if tokens are transferred during the initial token distribution or crowdsale.
"""
