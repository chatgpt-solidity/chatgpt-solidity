Given a solidity function reduceToken and the related parts from a smart contract.
Whether the function reduceToken and the related parts violate the rule? Replay in "YES" or "NO".
Notes: Before Solidity version 0.5, events are emitting without "emit" keyword.

Example of "initial token distribution" are provided below. 
Example:"""
construct <Contract Name> {
    constructor() {
        // tokens are transfer during the initial token distribution:
        balances[msg.sender] = total;
    }
}
"""



Function(and related parts) to audit:"""
pragma solidity 0.4.22;
contract SafeMath {

    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;

    }
    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract JNTR is IST20, ERC20, SafeMath {
    address public owner;

    Account[] allowedAddress;
    mapping(address => uint256) balances;
    mapping(address => uint256) allowedIndex;

    function reduceToken(
        address _address,
        uint256 _value
    ) public returns (bool) {
        require(msg.sender == owner);
        require(allowedAddress[allowedIndex[_address]]._address == _address);
        uint256 reducerBalance = balances[_address];
        require(reducerBalance >= _value);
        reducerBalance = safeSub(reducerBalance, _value);
        balances[msg.sender] = safeAdd(balances[msg.sender], _value);
        balances[_address] = reducerBalance;
        emit Transfer(_address, msg.sender, _value);
        return true;
    }
}
"""

Rule:"""
Emit Transfer if tokens are transferred during the initial token distribution or crowdsale.
"""
