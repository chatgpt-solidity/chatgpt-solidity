Given a solidity function constructor and the related parts from a smart contract.
Whether the function constructor and the related parts violate the rule? Replay in "YES" or "NO".
Notes: Before Solidity version 0.5, events are emitting without "emit" keyword.



Function(and related parts) to audit:"""
pragma solidity 0.6.12;
contract SiberianHusky is Context, IERC20, Ownable {

    mapping(address => uint256) private _rOwned;
    uint256 private constant _tTotal = 100000000000 * 10 ** 6 * 10 ** 9;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));

    constructor() public {
        _rOwned[_msgSender()] = _rTotal;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }
}

contract Ownable is Context {
    address private _owner;

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }
}
"""

Rule:"""
Emit Approval if any successful call to approve(address _spender, uint256 _value)
"""
