Given a solidity function transferFrom and the related parts from a smart contract.
Whether the function transferFrom throws unless the _from account has deliberately authorized the sender of the message via some mechanism? Reply in "YES" or "NO"
Note: returning false is not throwing.

Example of authorization mechanism:
Example:"""
contract {
    function transferFrom(address sender, address recipient, uint256 amount) {
        transfer(...);
        _allowances[sender][msg.sender] -= amount;
        // omit other codes
    }
}
"""



Function(and related parts) to audit:"""
contract SafeMath {

    function safeSub(uint256 a, uint256 b) internal returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {
        uint256 c = a + b;
        assert(c >= a && c >= b);
        return c;
    }

    function assert(bool assertion) internal {
        if (!assertion) {
            throw;
        }
    }
}

contract BNB is SafeMath {

    /* This creates an array with all balances */
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    /* A contract attempts to get the coins */
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) returns (bool success) {
        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead
        if (_value <= 0) throw;
        if (balanceOf[_from] < _value) throw; // Check if the sender has enough
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
        if (_value > allowance[_from][msg.sender]) throw; // Check allowance
        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value); // Subtract from the sender
        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); // Add the same to the recipient
        allowance[_from][msg.sender] = SafeMath.safeSub(
            allowance[_from][msg.sender],
            _value
        );
        Transfer(_from, _to, _value);
        return true;
    }
}
"""
