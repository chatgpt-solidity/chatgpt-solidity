Given a solidity function transferFrom and the related parts from a smart contract.
Whether the function transferFrom throws unless the _from account has deliberately authorized the sender of the message via some mechanism? Reply in "YES" or "NO"
Note: returning false is not throwing.

Example of authorization mechanism:
Example:"""
contract {
    function transferFrom(address sender, address recipient, uint256 amount) {
        transfer(...);
        _allowances[sender][msg.sender] -= amount;
        // omit other codes
    }
}
"""



Function(and related parts) to audit:"""
contract UnlimitedAllowanceToken is StandardToken {

    uint constant MAX_UINT = 2 ** 256 - 1;
    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.
    /// @param _from Address to transfer from.
    /// @param _to Address to transfer to.
    /// @param _value Amount to transfer.
    /// @return Success of transfer.
    function transferFrom(
        address _from,
        address _to,
        uint _value
    ) public returns (bool) {
        uint allowance = allowed[_from][msg.sender];
        if (
            balances[_from] >= _value &&
            allowance >= _value &&
            balances[_to] + _value >= balances[_to]
        ) {
            balances[_to] += _value;
            balances[_from] -= _value;
            if (allowance < MAX_UINT) {
                allowed[_from][msg.sender] -= _value;
            }
            Transfer(_from, _to, _value);
            return true;
        } else {
            return false;
        }
    }
}

contract StandardToken is Token {

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
}
"""
