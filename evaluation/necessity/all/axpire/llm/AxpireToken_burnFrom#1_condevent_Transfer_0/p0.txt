Given a solidity function burnFrom and the related parts from a smart contract.
Whether it explicitly contains the given action? Reply in "YES" or "NO".

Example of "initial token distribution" are provided below. 
Example:"""
construct <Contract Name> {
    constructor() {
        // tokens are transfer during the initial token distribution:
        balances[msg.sender] = total;
    }
}
"""



Function(and related parts) to audit:"""
pragma solidity 0.4.24;
contract Ownable {
    address public owner;

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
}

library SafeMath {

    /**
     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
}

contract BurnableToken is StandardToken, Ownable {

    /**
     * @dev Owner can burn a specific amount of tokens of other token holders.
     * @param _from The address of token holder whose tokens to be burned.
     * @param _amount The amount of token to be burned.
     */
    function burnFrom(address _from, uint256 _amount) public onlyOwner {
        require(_from != address(0));
        require(_amount > 0);
        require(_amount <= balances[_from]);
        balances[_from] = SafeMath.sub(balances[_from], _amount);
        totalSupply = SafeMath.sub(totalSupply, _amount);
        emit Transfer(_from, address(0), _amount);
        emit Burn(_from, _amount);
    }
}

contract Token {
    uint256 public totalSupply;
}

contract StandardToken is Token {

    mapping(address => uint256) balances;
}
"""

Action:"""
tokens are transferred during the initial token distribution or crowdsale.
"""
