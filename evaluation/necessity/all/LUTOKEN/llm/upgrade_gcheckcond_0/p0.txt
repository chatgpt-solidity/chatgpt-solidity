Given a solidity function upgrade and the related parts from a smart contract.
Whether the function upgrade and its related parts explicitly contains the condition? Reply in "YES" or "NO".

Function(and related parts) to audit:"""
library SafeMath {

    /**
     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;

    }
    /**
     * @dev Adds two numbers, throws on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}

contract UpgradeableToken is StandardToken {

    /** The next contract where the tokens will be migrated. */
    UpgradeAgent public upgradeAgent;

    /** How many tokens we have upgraded by now. */
    uint256 public totalUpgraded;

    /**
     * Allow the token holder to upgrade some of their tokens to a new contract.
     */
    function upgrade(uint256 value) public {
        require(value > 0);
        require(balances[msg.sender] >= value);
        UpgradeState state = getUpgradeState();
        require(
            state == UpgradeState.ReadyToUpgrade ||
                state == UpgradeState.Upgrading
        );

        balances[msg.sender] = balances[msg.sender].sub(value);
        // Take tokens out from circulation
        totalSupply_ = totalSupply_.sub(value);
        totalUpgraded = totalUpgraded.add(value);

        // Upgrade agent reissues the tokens
        upgradeAgent.upgradeFrom(msg.sender, value);
        emit Upgrade(msg.sender, upgradeAgent, value);
    }

    /**
     * Get the state of the token upgrade.
     */
    function getUpgradeState() public view returns (UpgradeState) {
        if (!canUpgrade()) {
            return UpgradeState.NotAllowed;
        } else if (upgradeAgent == address(0)) {
            return UpgradeState.WaitingForAgent;
        } else if (totalUpgraded == 0) {
            return UpgradeState.ReadyToUpgrade;
        }
        return UpgradeState.Upgrading;
    }

    /**
     * Child contract can enable to provide the condition when the upgrade can begun.
     */
    function canUpgrade() public pure returns (bool) {
        return true;
    }
}

contract BasicToken is ERC20Basic {


    mapping(address => uint256) balances;
    uint256 totalSupply_;
}
"""

Condition:"""
call any callee that returns (bool success)
"""
