contract DSAuth is DSAuthEvents {
    address public owner;
    DSAuthority public authority;

    function isAuthorized(
        address src,
        bytes4 sig
    ) internal view returns (bool) {
        if (src == address(this)) {
            return true;
        } else if (src == owner) {
            return true;
        } else if (authority == DSAuthority(0)) {
            return false;
        } else {
            return authority.canCall(src, this, sig);
        }
    }

    modifier auth() {
        require(isAuthorized(msg.sender, msg.sig));
        _;
    }
}

contract DSToken is DSTokenBase(0), DSStop {

    function mint(address guy, uint wad) public auth stoppable {
        _balances[guy] = add(_balances[guy], wad);
        _supply = add(_supply, wad);
        Mint(guy, wad);
    }

    function mint(uint wad) public {
        mint(msg.sender, wad);
    }
}

contract DSTokenBase is ERC20, DSMath {
    uint256 _supply;
    mapping(address => uint256) _balances;
}

contract DSMath {
    function add(uint x, uint y) internal pure returns (uint z) {
        require((z = x + y) >= x);
    }
}

contract DSStop is DSNote, DSAuth {
    bool public stopped;

    modifier stoppable() {
        require(!stopped);
        _;
    }
}

