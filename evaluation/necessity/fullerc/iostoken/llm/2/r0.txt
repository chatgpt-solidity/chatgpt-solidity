The `balanceOf` function provided in the Solidity code snippet appears to be compliant with the ERC-20 token standard as described in the ERC documentation you've provided. The ERC-20 standard specifies that the `balanceOf` function should:

- Accept an address `_owner` as a parameter.
- Return the balance of the `_owner` address.

The Solidity code for the `balanceOf` function does exactly that:

```solidity
function balanceOf(address _owner) constant returns (uint) {
    return balances[_owner];
}
```

It takes an address `_owner` and returns the balance associated with that address from the `balances` mapping.

However, there are a few points to consider for full compliance and best practices:

1. **Visibility and Mutability**: The ERC-20 standard specifies that the `balanceOf` function should be `public` and `view`. In the provided code, the `constant` keyword is used, which is equivalent to `view` in Solidity 0.4.17 and above. However, the visibility is not explicitly stated as `public`. It is best practice to explicitly state the visibility of functions.

2. **Return Type**: The ERC-20 standard specifies that the `balanceOf` function should return a `uint256`. In the provided code, it returns `uint`, which in Solidity is an alias for `uint256`, so this is compliant.

3. **Version Compatibility**: The ERC documentation mentions that the specifications use syntax from Solidity 0.4.17 or above. If the provided code is written in a version of Solidity that is older than 0.4.17, it may not be fully compatible with the standard.

4. **Events**: The ERC-20 standard requires that certain events be emitted on successful execution of functions like `transfer` and `approve`. The provided code snippet does not include these events, but to be fully compliant with the ERC-20 standard, the contract should implement and emit these events as specified.

5. **Function Modifiers**: The `balanceOf` function in the provided code snippet uses the `constant` keyword, which is deprecated in newer versions of Solidity. It is recommended to use `view` or `pure` instead, depending on the function's behavior.

In conclusion, the `balanceOf` function itself does not violate the ERC-20 standard based on the information provided. However, to ensure full compliance with the ERC-20 standard and best practices, the contract should also include the correct visibility modifiers, mutability keywords, and event emissions as required by the standard.