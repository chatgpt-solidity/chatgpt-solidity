The provided Solidity code for the `totalSupply` function in the `Token` contract is not fully compliant with the ERC-20 token standard as described in the provided ERC documentation. Here are the issues:

1. The `totalSupply` function is missing the `public` visibility specifier. According to the ERC-20 standard, the `totalSupply` function should be declared as `public` so that it can be accessed externally.

2. The `totalSupply` function is missing the `view` modifier. The ERC-20 standard specifies that the `totalSupply` function should be a view function, meaning it should not modify the state and should be read-only.

3. The `totalSupply` function should return a `uint256` type, not `uint`. While `uint` is an alias for `uint256` in Solidity, the ERC-20 standard explicitly specifies `uint256` as the return type for clarity and consistency.

4. The `constant` keyword is deprecated in newer versions of Solidity (0.5.0 and above). The `view` or `pure` modifier should be used instead, depending on whether the function reads the state or not. In this case, `view` is appropriate.

5. The `totalSupply` function is missing an implementation. The ERC-20 standard requires that this function returns the total token supply, but the provided code does not have any logic to return the actual supply.

Here is how the `totalSupply` function should be written to comply with the ERC-20 standard:

```solidity
function totalSupply() public view returns (uint256) {
    return _totalSupply; // Assuming _totalSupply is a state variable representing the total supply
}
```

In this corrected version, the function is `public`, has the `view` modifier, returns `uint256`, and assumes there is a state variable `_totalSupply` that holds the total supply of tokens.

Additionally, the ERC-20 standard requires the implementation of other functions and events, such as `balanceOf`, `transfer`, `transferFrom`, `approve`, `allowance`, and the `Transfer` and `Approval` events. The provided code snippet does not include these, so the contract would need to implement all required functions and events to be fully ERC-20 compliant.