The provided Solidity code for the `IOSToken` contract and the related parts from a smart contract do not fully comply with the ERC-20 token standard as described in the provided ERC documentation. Here are the reasons:

1. **Missing ERC-20 Functions**: The ERC-20 standard requires a set of functions (`name`, `symbol`, `decimals`, `totalSupply`, `balanceOf`, `transfer`, `transferFrom`, `approve`, `allowance`) and events (`Transfer`, `Approval`) to be implemented. The provided code snippet only shows the `totalSupply` being set and a constructor function that assigns the total supply to the creator's balance and emits a `Transfer` event. It does not show the implementation of the other required functions and events.

2. **Constructor Naming**: The code uses the old-style constructor naming (`function IOSToken()`), which matches the contract name. Since Solidity 0.4.22, it is recommended to use the `constructor` keyword for constructors to prevent potential issues with contract initialization.

3. **Transfer Event**: The `Transfer` event is correctly emitted in the constructor when tokens are created, which is in line with the ERC-20 standard.

4. **Inheritance**: The `IOSToken` contract is inheriting from `UnboundedRegularToken`, which is not shown in the provided code. To fully assess compliance with the ERC-20 standard, the implementation of `UnboundedRegularToken` and its parent `RegularToken` would need to be reviewed to ensure that all required functions and events are correctly implemented.

5. **Visibility and Return Types**: The ERC-20 standard specifies that certain functions must have a specific visibility (e.g., `public`) and return types (e.g., `bool success` for `transfer`, `transferFrom`, and `approve`). The provided code does not show the implementation of these functions, so it cannot be determined if they meet the standard's requirements.

6. **Error Handling**: The ERC-20 standard specifies that functions like `transfer` and `transferFrom` should throw an error if certain conditions are not met (e.g., insufficient balance). The provided code does not show how these functions are implemented, so it cannot be determined if proper error handling is in place.

In conclusion, based on the provided code snippet, the `IOSToken` contract does not show full compliance with the ERC-20 standard. To ensure compliance, the missing functions and events would need to be implemented according to the standard's specifications, and the constructor should be updated to use the `constructor` keyword. Additionally, the full implementation of `UnboundedRegularToken` and `RegularToken` would need to be reviewed to ensure that all ERC-20 requirements are met.