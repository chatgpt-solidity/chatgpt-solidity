The provided Solidity function `setOwner` and the related parts of the contract do not directly relate to the ERC-20 token standard. The ERC-20 standard specifies a set of functions and events that a token contract must implement to be considered ERC-20 compliant. These functions and events relate to the transfer of tokens, querying token balances, and allowing tokens to be spent by third parties.

The `setOwner` function is a contract management function that allows the current owner of the contract to transfer ownership to a new address. This is a common pattern in smart contract development for administrative control, but it is not part of the ERC-20 standard.

The ERC-20 standard includes the following methods and events:

- `name()`
- `symbol()`
- `decimals()`
- `totalSupply()`
- `balanceOf(address _owner)`
- `transfer(address _to, uint256 _value)`
- `transferFrom(address _from, address _to, uint256 _value)`
- `approve(address _spender, uint256 _value)`
- `allowance(address _owner, address _spender)`
- `Transfer` event
- `Approval` event

The `setOwner` function does not interfere with any of these methods or events. It is an additional function that is outside the scope of the ERC-20 standard. Therefore, implementing a `setOwner` function does not violate the ERC-20 standard, as long as the other required functions and events are correctly implemented and the token's behavior conforms to the standard's specifications.

However, it is important to note that while the `setOwner` function does not violate the ERC-20 standard, it must be used with caution. The ability to change the owner of a contract can be a powerful and potentially dangerous tool if not properly secured. It is crucial to ensure that only the legitimate owner can call this function to prevent unauthorized takeover of the contract. The use of the `require(msg.sender == owner);` statement is a basic security measure to ensure that only the current owner can execute this function.