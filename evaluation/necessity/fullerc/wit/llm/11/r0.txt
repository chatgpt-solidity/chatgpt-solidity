The provided Solidity code for the `unfreezeTransfers` function and related parts of the smart contract do not directly violate the ERC-20 standard as described in the provided ERC documentation. The ERC-20 standard primarily defines a set of functions and events related to the transfer of tokens, allowances, and balance inquiries. It does not specify rules regarding the freezing or unfreezing of token transfers.

However, the ability to freeze and unfreeze token transfers is not part of the ERC-20 standard. This means that while the `unfreezeTransfers` function does not violate the standard, it introduces additional functionality that is not covered by the standard. This could potentially cause compatibility issues with other contracts or services that expect strict adherence to the ERC-20 standard without additional features.

It is important to note that the ERC-20 standard requires that the `transfer` and `transferFrom` functions should throw (revert) if the sender does not have enough balance to send the tokens. If the `frozen` variable is used within these functions to prevent transfers when `frozen` is `true`, it would be an additional check that is not part of the standard. This could be seen as a security feature, but it is not specified by ERC-20.

In summary, the `unfreezeTransfers` function itself does not violate the ERC-20 standard, but the concept of freezing and unfreezing token transfers is outside the scope of the standard. If the `frozen` variable affects the behavior of the `transfer` and `transferFrom` functions, it is an extension to the standard and should be clearly documented and communicated to users and integrators of the token contract.