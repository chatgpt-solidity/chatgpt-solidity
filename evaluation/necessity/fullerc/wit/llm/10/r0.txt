The provided Solidity code for the `freezeTransfers` function and related parts of the smart contract do not directly violate the ERC-20 standard as described in the provided ERC documentation. However, it introduces functionality that is not part of the standard ERC-20 interface.

The ERC-20 standard specifies a set of functions and events that a compliant token should implement to ensure interoperability with other contracts and clients, such as wallets and exchanges. The key functions include `transfer`, `transferFrom`, `approve`, `allowance`, `balanceOf`, and `totalSupply`, along with the `Transfer` and `Approval` events.

The `freezeTransfers` function in the provided code is an additional feature that allows the owner of the contract to freeze all token transfers. This is not part of the ERC-20 standard, but it does not conflict with it either, as long as the freezing functionality is implemented in a way that respects the standard's requirements when it is not active.

For example, when transfers are not frozen, the `transfer` and `transferFrom` functions must still behave according to the ERC-20 standard, including firing the `Transfer` event and reverting if the sender does not have enough balance.

However, adding such a freeze functionality could be seen as a limitation for token holders, as it gives the contract owner the power to stop all token transfers at any time. This could be a concern for users and could affect the token's acceptance and usability. It is important to note that such a feature should be clearly communicated to users and potential token holders before they decide to acquire the tokens.

In summary, while the `freezeTransfers` function does not violate the ERC-20 standard, it adds a non-standard feature that could impact the token's functionality and user trust. It is essential to ensure that the rest of the contract's functions comply with the ERC-20 standard when the freeze is not in effect.