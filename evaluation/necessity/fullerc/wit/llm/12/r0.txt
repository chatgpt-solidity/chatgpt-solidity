The `refundTokens` function in the provided Solidity code is not part of the ERC-20 token standard, but it does not violate the ERC-20 standard either. The ERC-20 standard specifies a set of functions and events that a compliant token must implement to ensure interoperability with other contracts and clients. These include `transfer`, `transferFrom`, `approve`, `allowance`, `balanceOf`, `totalSupply`, and corresponding events `Transfer` and `Approval`.

The `refundTokens` function is an additional utility function that allows the owner of the contract to transfer tokens that may have been sent to the contract by mistake. This is a safeguard mechanism and is not covered by the ERC-20 standard. However, it does interact with the ERC-20 token interface by calling the `transfer` function of another token contract to move the tokens to the specified refund address.

Here are some important points to consider regarding the `refundTokens` function:

1. **Ownership Check**: The function requires that the caller is the owner of the contract. This is a security measure to ensure that only the owner can initiate a refund of tokens.

2. **Token Check**: The function checks that the `_token` address is not the address of the contract itself. This prevents the contract from trying to transfer its own tokens, which could lead to unexpected behavior.

3. **ERC-20 Compliance**: The function uses the `transfer` method of the ERC-20 token interface to move tokens. This is compliant with the ERC-20 standard as long as the token contract at `_token` address is an ERC-20 compliant token.

4. **Event Emission**: The function emits a custom event `RefundTokens` which is not part of the ERC-20 standard but is a good practice to log such actions for transparency and auditability.

In conclusion, the `refundTokens` function does not violate the ERC-20 standard. It is an additional feature provided by the contract owner to handle specific scenarios where tokens are sent to the contract by mistake. It correctly interacts with ERC-20 tokens by using the standard `transfer` function and includes appropriate checks and event emissions. However, it is important to ensure that the rest of the contract, including the `AbstractToken` from which `WiT` inherits, is fully compliant with the ERC-20 standard.