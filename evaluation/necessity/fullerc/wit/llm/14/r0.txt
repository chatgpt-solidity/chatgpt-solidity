The provided Solidity function interfaces are meant to be compared against the ERC-20 token standard, which is the ERC described in the text you provided. The ERC-20 standard is a common set of rules for Ethereum tokens to follow, allowing them to be easily exchanged and integrated into various applications, including wallets and exchanges.

Let's compare the provided function interfaces with the ERC-20 standard:

1. `balanceOf(address) returns(uint256)` - **Compliant**
2. `transfer(address,uint256) returns(bool)` - **Compliant**
3. `transferFrom(address,address,uint256) returns(bool)` - **Compliant**
4. `approve(address,uint256) returns(bool)` - **Compliant**
5. `allowance(address,address) returns(uint256)` - **Compliant**
6. `constructor() returns()` - **Not part of ERC-20** (constructors are not specified in ERC-20, but they are common in contracts)
7. `totalSupply() returns(uint256)` - **Compliant**
8. `createTokens(uint256) returns(bool)` - **Not part of ERC-20** (ERC-20 does not specify a method for creating tokens)
9. `mintToken(address,uint256) returns(bool)` - **Not part of ERC-20** (similar to createTokens, not a standard ERC-20 function)
10. `setOwner(address) returns()` - **Not part of ERC-20** (ownership management is not covered by ERC-20)
11. `freezeTransfers() returns()` - **Not part of ERC-20** (freezing transfers is not a standard ERC-20 function)
12. `unfreezeTransfers() returns()` - **Not part of ERC-20** (unfreezing transfers is not a standard ERC-20 function)
13. `refundTokens(address,address,uint256) returns()` - **Not part of ERC-20** (refund mechanism is not a standard ERC-20 function)
14. `freezeAccount(address,bool) returns()` - **Not part of ERC-20** (account freezing is not a standard ERC-20 function)
15. `symbol() returns(string)` - **Compliant**
16. `name() returns(string)` - **Compliant**
17. `decimals() returns(uint8)` - **Compliant**

Based on the comparison, the provided list of function interfaces includes several functions that are not part of the ERC-20 standard (`createTokens`, `mintToken`, `setOwner`, `freezeTransfers`, `unfreezeTransfers`, `refundTokens`, `freezeAccount`). These additional functions do not necessarily violate the ERC-20 standard, but they extend beyond it, adding functionality that is not covered by the standard.

It's important to note that the ERC-20 standard does not prohibit the inclusion of additional functions beyond those specified. However, for a token to be considered ERC-20 compliant, it must implement all the required functions and events as outlined in the standard. The additional functions in the provided list could be part of a custom token implementation that offers more features than a basic ERC-20 token.