The provided Solidity code for the `MyToken` contract and its `transfer` function needs to be compared against the ERC-20 token standard to determine if it complies with the standard's requirements. Let's go through the key points of the ERC-20 standard and see if the `MyToken` contract adheres to them:

1. **Return Value for `transfer`**: The ERC-20 standard specifies that the `transfer` function should return a boolean value indicating success or failure. The provided `transfer` function does not have a return type and does not return any value.

2. **Transfer Event**: The ERC-20 standard requires that a `Transfer` event must be triggered when tokens are transferred. The provided code does trigger a `Transfer` event, but the event is not defined in the provided code snippet. It should be defined as follows to comply with the standard:
   ```solidity
   event Transfer(address indexed _from, address indexed _to, uint256 _value);
   ```

3. **Checking Balances**: The ERC-20 standard states that the `transfer` function should throw if the sender does not have enough balance. The provided code uses `require(balanceOf[_from] > _value);` which should be `require(balanceOf[_from] >= _value);` to allow transfers of the entire balance.

4. **Address Zero Checks**: The provided code checks for transfers to the `0x0` address and suggests using a `burn` function instead. While the ERC-20 standard does not explicitly forbid transfers to the `0x0` address, it is a common practice to prevent such transfers to avoid accidental loss of tokens.

5. **Overflow Checks**: The provided code correctly checks for overflows with `require(balanceOf[_to] + _value > balanceOf[_to]);`.

6. **Additional Functions**: The ERC-20 standard specifies additional functions such as `approve`, `allowance`, and `transferFrom`, which are not included in the provided code snippet. To be fully ERC-20 compliant, these functions must be implemented.

7. **Optional Functions**: The ERC-20 standard mentions optional functions like `name`, `symbol`, and `decimals`, which are not present in the provided code snippet. While these are not required for compliance, they are commonly included for better token usability.

Based on the above points, the provided `MyToken` contract's `transfer` function and related parts violate the ERC-20 standard in the following ways:

- The `transfer` function does not return a boolean value.
- The `Transfer` event is not defined in the provided snippet (though it is used).
- The balance check should allow for the transfer of the entire balance, not just strictly greater amounts.

To comply with the ERC-20 standard, the `transfer` function should be modified to return a boolean value, the `Transfer` event should be properly defined, and the balance check should be corrected. Additionally, the full implementation should include the `approve`, `allowance`, and `transferFrom` functions, as well as the optional `name`, `symbol`, and `decimals` functions if desired.