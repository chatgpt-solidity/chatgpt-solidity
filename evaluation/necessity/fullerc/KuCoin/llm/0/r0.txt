The provided Solidity code for the `MyToken` contract does not fully comply with the ERC-20 token standard as described in the given ERC documentation. Here are the reasons why:

1. Missing Functions: The `MyToken` contract is missing several key functions that are required by the ERC-20 standard, such as `transfer`, `transferFrom`, `approve`, and `allowance`. These functions are essential for enabling token transfers and allowing third-party approvals.

2. Missing Events: The ERC-20 standard requires two events: `Transfer` and `Approval`. These events must be emitted when tokens are transferred and when an approval is granted, respectively. The provided `MyToken` contract does not define or emit these events.

3. Return Types: The ERC-20 standard specifies that certain functions must return a boolean value to indicate success. The provided `MyToken` contract does not include any functions that return a boolean, as it is missing the required functions mentioned above.

4. Constructor: The ERC-20 standard does not specify the constructor's signature. However, in Solidity 0.4.17 and above, constructors are defined using the `constructor` keyword rather than the function name. The provided code uses the old syntax for defining a constructor (`function MyToken(...)`), which is deprecated in newer versions of Solidity.

5. Visibility and Mutability: The ERC-20 standard does not specify visibility (public, external, etc.) for functions, but it is a good practice to explicitly state the visibility for clarity and security. The provided `MyToken` contract does not specify visibility for the constructor. Additionally, the `name`, `symbol`, and `decimals` functions should be marked as `view` since they do not modify the state.

6. Data Types: The ERC-20 standard specifies that the `name`, `symbol`, and `decimals` functions should return `string` and `uint8` types, respectively. The provided `MyToken` contract correctly defines these types as public variables, which in Solidity automatically creates getter functions with the correct return types.

To summarize, the provided `MyToken` contract does not implement the ERC-20 standard correctly and is missing several critical components. To comply with the ERC-20 standard, the contract needs to implement all the required functions, define and emit the necessary events, and follow the best practices for visibility and mutability of functions.