Based on the provided Solidity code and the ERC-20 token standard, we can analyze whether the `KINGSGLOBAL` contract adheres to the ERC-20 specification.

The ERC-20 standard specifies a set of functions and events that a compliant token contract must implement. The provided `KINGSGLOBAL` contract code snippet does not include the full implementation of the ERC-20 standard, but we can check the given parts against the standard.

Here are the key points from the ERC-20 standard and how the `KINGSGLOBAL` contract matches up:

1. `name`, `symbol`, and `decimals` are optional return functions that provide information about the token. In the `KINGSGLOBAL` contract, these are implemented as public state variables, which is acceptable since Solidity automatically generates getter functions for public variables.

2. `totalSupply` is a function that returns the total token supply. In the `KINGSGLOBAL` contract, `totalSupply` is a public state variable, which again is acceptable as it provides a getter function.

3. `balanceOf` is a function that returns the account balance of another account with address `_owner`. The `KINGSGLOBAL` contract does not show the implementation of this function, but it does have a `balances` mapping that is likely used for this purpose.

4. `transfer` is a function that transfers `_value` amount of tokens to address `_to`. The `KINGSGLOBAL` contract does not show the implementation of this function.

5. `transferFrom`, `approve`, and `allowance` are functions related to allowing and performing transfers on behalf of others. The `KINGSGLOBAL` contract does not show the implementation of these functions.

6. `Transfer` and `Approval` events must be emitted on successful transfers and approvals, respectively. The `KINGSGLOBAL` contract does not show the implementation of these events.

From the provided code snippet, we cannot conclude that the `KINGSGLOBAL` contract violates the ERC-20 standard because the snippet does not include the full contract code. However, we can note that the snippet does not show the implementation of several critical functions and events required by the ERC-20 standard, such as `transfer`, `transferFrom`, `approve`, `allowance`, `Transfer`, and `Approval`.

To fully determine compliance with the ERC-20 standard, the complete contract code would need to be reviewed, including the implementation of the missing functions and events. If the full contract does not implement these functions and events as specified by the ERC-20 standard, then it would indeed be in violation of the standard.