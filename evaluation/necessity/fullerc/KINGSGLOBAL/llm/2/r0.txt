The `balanceOf` function provided in the Solidity code snippet appears to be compliant with the ERC-20 token standard as described in the ERC documentation you've provided. The ERC-20 standard specifies that the `balanceOf` function should:

- Accept an address `_owner` as a parameter.
- Return the balance of `_owner`.

The Solidity code for `balanceOf` does exactly that:

```solidity
function balanceOf(address _owner) constant returns (uint256 balance) {
    return balances[_owner];
}
```

It takes an address `_owner` and returns the balance associated with that address from the `balances` mapping.

However, there are a few points to consider for full compliance and best practices:

1. **Visibility and Mutability**: The ERC-20 standard specifies that `balanceOf` should be a `public view` function. In the provided code, the `constant` keyword is used, which is equivalent to `view` in newer versions of Solidity. However, the `public` visibility specifier is missing. It should be added to ensure that the function can be called externally.

2. **Return Type Documentation**: The ERC-20 standard does not require a named return variable (`balance` in this case). It is sufficient to specify the return type as `uint256`. Naming the return variable is optional and does not affect compliance.

3. **Solidity Version**: The ERC documentation mentions that the specifications use syntax from Solidity 0.4.17 (or above). It is important to ensure that the contract is written in a compatible Solidity version. If the contract is written in an older version, it should be updated to comply with the latest standards and security practices.

4. **Events**: The ERC-20 standard requires that certain events be emitted on successful token transfers and approvals (`Transfer` and `Approval`). While the `balanceOf` function itself does not emit events, it is important to ensure that the rest of the contract complies with these event requirements.

5. **Error Handling**: The ERC-20 standard states that functions should throw (revert) on failure. In newer versions of Solidity, it is recommended to use `require` statements for input validation and to revert on errors. The provided code snippet does not show any error handling, but it is not necessary for `balanceOf` as it is a read-only function.

In conclusion, the provided `balanceOf` function does not violate the ERC-20 standard, but the code should be updated to include the `public` visibility specifier for full compliance. Additionally, the rest of the contract should be reviewed to ensure that it meets all other ERC-20 requirements, including event emissions and error handling.