The provided Solidity function interfaces are meant to represent an ERC-20 token contract, as the ERC provided is the ERC-20 standard for Ethereum tokens. Let's compare the provided interfaces with the ERC-20 standard specification:

1. `transfer(address,uint256) returns(bool)` - This matches the ERC-20 `transfer` function specification.

2. `transferFrom(address,address,uint256) returns(bool)` - This matches the ERC-20 `transferFrom` function specification.

3. `balanceOf(address) returns(uint256)` - This matches the ERC-20 `balanceOf` function specification.

4. `approve(address,uint256) returns(bool)` - This matches the ERC-20 `approve` function specification.

5. `allowance(address,address) returns(uint256)` - This matches the ERC-20 `allowance` function specification.

6. `ArthurStandardToken(uint256,string,uint8,string) returns()` - This does not match any function in the ERC-20 standard. It seems to be a constructor for initializing the token with a total supply, name, decimals, and symbol. Constructors are not part of the ERC-20 interface, so this would not violate the standard.

7. `approveAndCall(address,uint256,bytes) returns(bool)` - This function is not part of the ERC-20 standard. It seems to be an extension that allows for a single transaction to approve and call another contract. This does not violate the ERC-20 standard, but it is an additional feature not required by the standard.

8. `symbol() returns(string)` - This matches the ERC-20 `symbol` function specification.

9. `name() returns(string)` - This matches the ERC-20 `name` function specification.

10. `totalSupply() returns(uint256)` - This matches the ERC-20 `totalSupply` function specification.

11. `decimals() returns(uint8)` - This matches the ERC-20 `decimals` function specification.

Based on the comparison, the provided Solidity function interfaces do not violate the ERC-20 standard. All required functions are present and match the ERC-20 specification. The additional `approveAndCall` function and the constructor `ArthurStandardToken` do not violate the standard, as they are extra functionalities that do not conflict with the ERC-20 requirements. However, it's important to note that the actual implementation of these functions must also adhere to the standard's behavior, not just the interface.