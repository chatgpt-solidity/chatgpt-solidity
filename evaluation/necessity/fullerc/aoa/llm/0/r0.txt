The provided Solidity function `transfer` is intended to be part of an ERC-20 token contract, as it is a common method within the ERC-20 standard. To determine if the function complies with the ERC-20 standard, we need to compare it against the ERC-20 specification provided.

Here's the relevant part of the ERC-20 specification for the `transfer` function:

```
transfer
Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message callerâ€™s account balance does not have enough tokens to spend. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transfer(address _to, uint256 _value) public returns (bool success)
```

Now, let's analyze the provided `transfer` function:

```solidity
function transfer(
    address _to,
    uint256 _value
) public returns (bool success) {
    if (balances[msg.sender] >= _value && _value > 0) {
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    } else {
        return false;
    }
}
```

Here are the points of compliance and potential issues:

1. **Transferring Tokens**: The function correctly transfers `_value` amount of tokens from the sender's balance to the `_to` address if the sender has enough balance.

2. **Return Value**: The function returns a boolean value indicating success or failure, as specified by the ERC-20 standard.

3. **Transfer Event**: The function emits a `Transfer` event when tokens are transferred, which is in compliance with the ERC-20 standard.

4. **Throwing on Failure**: The ERC-20 standard states that the function SHOULD throw if the sender does not have enough tokens to spend. However, the provided function returns `false` instead of throwing an error. This is a deviation from the standard's recommendation, but it is not a strict violation since the standard uses the word "SHOULD" rather than "MUST". Callers of this function must handle the `false` return value appropriately.

5. **Transfers of 0 Values**: The ERC-20 standard requires that transfers of 0 values be treated as normal transfers and fire the `Transfer` event. The provided function does not allow transfers of 0 values because of the condition `_value > 0`. This is a violation of the ERC-20 standard.

Based on the analysis, the provided `transfer` function violates the ERC-20 standard in regards to handling transfers of 0 values. It should allow these transfers and emit the `Transfer` event even when `_value` is 0. Additionally, while not a strict violation, the function's use of a return value instead of throwing an error on failure is a deviation from the standard's recommendation for error handling.