The provided Solidity code for the `mintTokens` function and related parts of the `xEuro` contract do not directly violate the ERC-20 standard as described in the provided ERC documentation. However, there are a few points to consider:

1. **Minting Mechanism**: The ERC-20 standard does not specify a mechanism for minting new tokens. The `mintTokens` function in the `xEuro` contract is a custom function that allows new tokens to be created. This is not against the ERC-20 standard, but it is important to note that the standard itself does not define how tokens should be created or minted.

2. **Access Control**: The `mintTokens` function includes access control to restrict who can mint new tokens (`require(canMint[msg.sender]);`). This is a common practice to ensure that only authorized addresses can perform certain actions, such as minting new tokens.

3. **Preventing Double Minting**: The contract uses a mapping (`fiatInPaymentIds`) to ensure that tokens cannot be minted more than once for the same fiat transaction ID. This is a custom security measure and does not conflict with the ERC-20 standard.

4. **Transfer of Minted Tokens**: The comment in the `mintTokens` function suggests that minted tokens should be transferred to the contract's own address and then transferred out using `transferFrom`. This is a specific implementation detail and does not violate the ERC-20 standard, but it is important to ensure that the `transferFrom` function is implemented according to the standard, including firing the `Transfer` event and checking for allowances.

5. **Events**: The `mintTokens` function emits a custom event (`TokensMinted`) that is not part of the ERC-20 standard. While this does not violate the standard, it is important to note that the ERC-20 standard requires a `Transfer` event to be emitted when tokens are transferred, including when new tokens are created (with the `_from` address set to `0x0`).

6. **SafeMath Library**: The contract uses the `SafeMath` library for safe arithmetic operations, which is a good practice to prevent overflow and underflow issues.

7. **ERC-20 Required Functions and Events**: The provided code snippet does not show the implementation of all the required ERC-20 functions (`transfer`, `transferFrom`, `approve`, `allowance`) and events (`Transfer`, `Approval`). To fully comply with the ERC-20 standard, these functions and events must be correctly implemented in the contract.

In summary, the `mintTokens` function and related parts of the `xEuro` contract do not violate the ERC-20 standard, but it is important to ensure that all required functions and events of the ERC-20 standard are implemented correctly. Additionally, the custom minting mechanism and security measures should be carefully reviewed and tested to ensure they work as intended and do not introduce any vulnerabilities.