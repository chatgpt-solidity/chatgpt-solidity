Given a solidity code for function transferAndCall and the related parts from a smart contract and a ERC.
Whether the function transferAndCall and the related parts violate the given ERC? 

Function(and related parts) to audit:"""
library SafeMath {

    /**
     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }

    /**
     * @dev Adds two unsigned integers, reverts on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
}

contract xEuro {
    mapping(uint256 => TokensInTransfer) public tokensInTransfer; //

    /* -- Accounting: exchange tokens to fiat (tokens sent to contract owns address > fiat payment) */
    uint public tokensInEventsCounter = 0; //

    uint256 minExchangeAmount = 12; // xEuro tokens

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance
    // function allowance(address _owner, address _spender) constant returns (uint256 remaining)
    mapping(address => mapping(address => uint256)) public allowance;

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof
    // function balanceOf(address _owner) constant returns (uint256 balance)
    mapping(address => uint256) public balanceOf;

    // addresses allowed to transfer tokens from contract's own address:
    mapping(address => bool) public canTransferFromContract;

    /*  ---------- Interaction with other contracts  */

    /* https://github.com/ethereum/EIPs/issues/677
     * transfer tokens with additional info to another smart contract, and calls its correspondent function
     * @param address _to - another smart contract address
     * @param uint256 _value - number of tokens
     * @param bytes _extraData - data to send to another contract
     * > this may be used to convert pre-ICO tokens to ICO tokens
     */
    function transferAndCall(
        address _to,
        uint256 _value,
        bytes memory _extraData
    ) public returns (bool) {
        tokenRecipient receiver = tokenRecipient(_to);

        if (transferFrom(msg.sender, _to, _value)) {
            if (receiver.tokenFallback(msg.sender, _value, _extraData)) {
                emit DataSentToAnotherContract(msg.sender, _to, _extraData);

                return true;
            }
        }
        return false;
    }

    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool) {
        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)
        require(_value >= 0);

        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism
        require(
            msg.sender == _from ||
                _value <= allowance[_from][msg.sender] ||
                (_from == address(this) && canTransferFromContract[msg.sender])
        );

        // check if _from account have required amount
        require(_value <= balanceOf[_from]);

        if (_to == address(this)) {
            // (!) only token holder can send tokens to smart contract to get fiat, not using allowance
            require(_from == msg.sender);
        }

        balanceOf[_from] = balanceOf[_from].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);

        // If allowance used, change allowances correspondingly
        if (_from != msg.sender && _from != address(this)) {
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(
                _value
            );
        }

        if (_to == address(this) && _value > 0) {
            require(_value >= minExchangeAmount);

            tokensInEventsCounter++;
            tokensInTransfer[tokensInEventsCounter].from = _from;
            tokensInTransfer[tokensInEventsCounter].value = _value;
            tokensInTransfer[tokensInEventsCounter].receivedOn = now;

            emit TokensIn(_from, _value, tokensInEventsCounter);
        }

        emit Transfer(_from, _to, _value);

        return true;
    }
}
"""

ERC:"""
Simple Summary
A standard interface for tokens.

Abstract
The following standard allows for the implementation of a standard API for tokens within smart contracts. This standard provides basic functionality to transfer tokens, as well as allow tokens to be approved so they can be spent by another on-chain third party.

Motivation
A standard interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.

Specification

Token

Methods

NOTES:
The following specifications use syntax from Solidity 0.4.17 (or above). 
Callers MUST handle false from returns (bool success). Callers MUST NOT assume that false is never returned!

name
Returns the name of the token - e.g. "MyToken". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.
function name() public view returns (string)

symbol
Returns the symbol of the token. E.g. "HIX". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.
function symbol() public view returns (string)

decimals
Returns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation. OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.
function decimals() public view returns (uint8)

totalSupply
Returns the total token supply.
function totalSupply() public view returns (uint256)

balanceOf
Returns the account balance of another account with address _owner.
function balanceOf(address _owner) public view returns (uint256 balance)

transfer
Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transfer(address _to, uint256 _value) public returns (bool success)

transferFrom
Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event. The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)

approve
Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value. 
NOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. THOUGH The contract itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed before.
function approve(address _spender, uint256 _value) public returns (bool success)

allowance
Returns the amount which _spender is still allowed to withdraw from _owner.
function allowance(address _owner, address _spender) public view returns (uint256 remaining)

Events

Transfer
MUST trigger when tokens are transferred, including zero value transfers. A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.
event Transfer(address indexed _from, address indexed _to, uint256 _value)

Approval
MUST trigger on any successful call to approve(address _spender, uint256 _value).
event Approval(address indexed _owner, address indexed _spender, uint256 _value)

Implementation

There are already plenty of ERC20-compliant tokens deployed on the Ethereum network.
Different implementations have been written by various teams that have different trade-offs: from gas saving to improved security.

Example implementations are available at
- [OpenZeppelin implementation](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol)
- [ConsenSys implementation](https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/EIP20.sol)


History

Historical links related to this standard:

- Original proposal from Vitalik Buterin: https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs/499c882f3ec123537fc2fccd57eaa29e6032fe4a
- Reddit discussion: https://www.reddit.com/r/ethereum/comments/3n8fkn/lets_talk_about_the_coin_standard/
- Original Issue #20: https://github.com/ethereum/EIPs/issues/20

Copyright
Copyright and related rights waived via [CC0](../LICENSE.md).
"""