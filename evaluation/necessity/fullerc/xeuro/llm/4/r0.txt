The `transferAllAndCall` function in the provided Solidity code is not part of the ERC-20 standard. The ERC-20 standard specifies a minimal set of functionalities for tokens, including `transfer`, `transferFrom`, `approve`, `allowance`, `balanceOf`, and `totalSupply`, along with the `Transfer` and `Approval` events.

The `transferAllAndCall` function appears to be an extension that allows a user to transfer their entire token balance to another address and then call a function on the recipient's contract. This is similar to the ERC-677 standard, which is an extension of ERC-20 and introduces the `transferAndCall` function to allow tokens to be transferred and a call to be made within a single transaction.

The provided `transferAndCall` function in the code is also not part of the ERC-20 standard but is an implementation of the ERC-677 standard. It allows tokens to be transferred to a contract and then a function (`tokenFallback`) to be called on that contract.

While these functions (`transferAllAndCall` and `transferAndCall`) are not part of the ERC-20 standard, they do not violate it as long as the standard ERC-20 functions are correctly implemented and behave as specified by the standard. Extensions and additional functionality are common in smart contracts, and as long as they do not interfere with the core ERC-20 functions, they are generally acceptable.

However, it is important to note that the `transferFrom` function in the provided code has a potential issue. The ERC-20 standard states that the function should throw an error if the sender is not authorized to transfer tokens on behalf of the `_from` address. The provided code checks for authorization but does not explicitly throw an error; instead, it uses `require` statements that will revert the transaction if the conditions are not met. This is functionally correct, but the comment in the code could be misleading as it suggests that the function should throw an error, which is an outdated pattern in Solidity (replaced by `require` and `revert`).

Additionally, the `transferFrom` function allows for a special case where the contract itself can transfer tokens without an allowance if the sender is in the `canTransferFromContract` mapping. This is not part of the ERC-20 standard and could be seen as a custom extension or modification. It is important to ensure that such custom behavior is well-documented and understood by users of the contract.

In summary, the `transferAllAndCall` function and the related `transferAndCall` function do not violate the ERC-20 standard as long as the standard functions are implemented correctly. However, the custom behavior in `transferFrom` should be clearly documented, and the code should be carefully reviewed to ensure it aligns with the intended behavior and security best practices.