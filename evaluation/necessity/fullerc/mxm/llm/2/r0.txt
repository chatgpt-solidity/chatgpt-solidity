The provided Solidity code snippet for the `ban` function and the related parts of the `TokenERC20` contract do not directly violate the ERC-20 standard as described in the provided ERC excerpt. The ERC-20 standard primarily defines a set of functions and events related to the transfer and approval of token balances. It does not specify rules regarding additional administrative functions such as banning addresses.

However, it is important to note that the `ban` function could indirectly affect the ERC-20 compliance if it were used to prevent blacklisted addresses from transferring or receiving tokens. If the `ban` function sets a flag that is then checked in the `transfer` or `transferFrom` functions to prevent blacklisted addresses from participating in token transfers, this could potentially violate the standard if it prevents the proper execution of these functions or the emission of the `Transfer` event as required by the standard.

For example, if the `transfer` function includes a check like `require(!blacklist[msg.sender])`, it would throw an exception and revert the transaction for a blacklisted address, which could be seen as non-compliant behavior if the blacklisted address has a sufficient balance and should be able to transfer tokens according to the ERC-20 standard.

To ensure compliance with ERC-20, any additional functionality such as blacklisting should be carefully designed to not interfere with the core ERC-20 functions (`transfer`, `transferFrom`, `approve`, `allowance`, etc.) and their expected behaviors.

In summary, the `ban` function itself does not violate the ERC-20 standard, but its implementation and interaction with the core ERC-20 functions could lead to non-compliant behavior if not handled properly. It is essential to review the entire contract, especially the parts that handle token transfers, to determine full compliance with the ERC-20 standard.