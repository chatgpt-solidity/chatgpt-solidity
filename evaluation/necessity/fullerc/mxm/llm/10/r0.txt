The provided Solidity event interfaces are:

```solidity
event Transfer(address indexed, address indexed, uint256);
event Burn(address indexed, uint256);
```

The ERC in question appears to be the ERC-20 standard, which is a common standard for fungible tokens on the Ethereum blockchain. The ERC-20 standard specifies a set of rules that a token contract must follow to be considered ERC-20 compliant.

According to the ERC-20 standard, the required events are:

```solidity
event Transfer(address indexed _from, address indexed _to, uint256 _value);
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
```

The `Transfer` event in the provided code matches the ERC-20 standard's `Transfer` event signature, so it is compliant with the ERC-20 standard.

However, the `Burn` event is not part of the ERC-20 standard. The `Burn` event is typically used in token contracts to indicate that a certain amount of tokens has been permanently removed from circulation. While the `Burn` event is not required by the ERC-20 standard, having additional events in a contract does not violate the standard. ERC-20 only requires that the `Transfer` and `Approval` events are implemented and emitted according to the specification.

It's important to note that the presence of a `Burn` event does not necessarily mean the token contract is non-compliant with ERC-20. It simply means that the contract has additional functionality beyond the basic ERC-20 requirements. For full compliance, the contract must also implement all the required functions specified in the ERC-20 standard.

In conclusion, the provided event interfaces do not violate the ERC-20 standard. The `Transfer` event is compliant, and the `Burn` event is additional functionality that does not conflict with the standard. However, to fully assess ERC-20 compliance, one would need to review the entire contract, including all functions and their implementations, not just the event interfaces.