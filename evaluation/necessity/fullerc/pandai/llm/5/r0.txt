The provided Solidity code for the `totalSupply` function and related parts of the smart contract appear to be compliant with the ERC-20 token standard as described in the provided ERC documentation.

The ERC-20 standard specifies that the `totalSupply` function should:

- Be a public view function.
- Return the total token supply as a `uint256`.

The provided Solidity code meets these requirements:

```solidity
function totalSupply() public view virtual override returns (uint256) {
    return _totalSupply;
}
```

The function is marked as `public` and `view`, which means it doesn't alter the state and can be called externally. It returns a `uint256`, which is the total supply of the tokens. The function is also marked as `virtual` and `override`, which are Solidity-specific keywords that allow for the function to be overridden in derived contracts and indicate that it is overriding a function from a base contract or interface, respectively.

The `_totalSupply` variable is marked as `private`, which means it can only be accessed internally within the contract itself, which is a common practice for encapsulation in contract design.

The ERC-20 standard does not specify the visibility of the `_totalSupply` variable or the internal implementation details of the `totalSupply` function, as long as the function behaves as described. Therefore, the provided code does not violate the ERC-20 standard based on the information given.

It's important to note that the ERC-20 standard also requires the `Transfer` event to be emitted when tokens are transferred, including when new tokens are created or destroyed (which would affect the total supply). However, since the provided code snippet does not include the implementation of token transfer or creation functions, we cannot assess whether the contract correctly implements these aspects of the standard. To fully audit the contract for ERC-20 compliance, one would need to review the entire contract, including all functions and events related to token transfers and supply management.