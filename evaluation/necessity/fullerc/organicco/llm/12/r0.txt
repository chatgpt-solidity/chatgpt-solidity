The provided Solidity event interfaces are:

```
event Transfer(address indexed, address indexed, uint256);
event Approval(address indexed, address indexed, uint256);
event Transfer(address indexed, address indexed, uint256, bytes indexed);
```

According to the ERC-20 token standard, the required events are:

```
event Transfer(address indexed _from, address indexed _to, uint256 _value);
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
```

Comparing the provided event interfaces with the ERC-20 standard:

1. The first `Transfer` event matches the ERC-20 specification exactly, with the `_from` and `_to` addresses being indexed, along with the `_value` of the transfer.

2. The `Approval` event also matches the ERC-20 specification, with the `_owner` and `_spender` addresses being indexed, along with the `_value` of the approval.

3. The third event, however, is not part of the ERC-20 standard. It is an overloaded version of the `Transfer` event with an additional `bytes indexed` parameter. This event does not violate the ERC-20 standard, but it is not required by it either. It seems to be an extension to the standard `Transfer` event, possibly to include additional data with transfers (commonly seen in ERC-721 or ERC-1155 standards for NFTs or multi-token transfers).

In conclusion, the provided event interfaces do not violate the ERC-20 standard. The first two events are compliant with the standard, and the third event is an extension that does not conflict with the standard's requirements. However, it's important to note that the third event is not part of the ERC-20 specification and may not be recognized by all ERC-20 compatible services or interfaces.