The provided Solidity function interfaces are to be compared with the ERC-20 token standard as described in the ERC section you provided. The ERC-20 standard specifies a minimal set of functions and events that a compliant token contract must implement to enable interoperability across different applications and platforms.

Here are the required functions and events for an ERC-20 token:

- `function name() public view returns (string)`
- `function symbol() public view returns (string)`
- `function decimals() public view returns (uint8)`
- `function totalSupply() public view returns (uint256)`
- `function balanceOf(address _owner) public view returns (uint256 balance)`
- `function transfer(address _to, uint256 _value) public returns (bool success)`
- `function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)`
- `function approve(address _spender, uint256 _value) public returns (bool success)`
- `function allowance(address _owner, address _spender) public view returns (uint256 remaining)`
- `event Transfer(address indexed _from, address indexed _to, uint256 _value)`
- `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`

Now, let's compare the provided function interfaces with the ERC-20 standard:

- `name() returns(string)` - Compliant
- `symbol() returns(string)` - Compliant
- `decimals() returns(uint256)` - Compliant, but ERC-20 expects `uint8`
- `totalSupply() returns(uint256)` - Compliant
- `balanceOf(address) returns(uint256)` - Compliant
- `transfer(address,uint256) returns(bool)` - Compliant
- `mint(address,uint256) returns(bool)` - Not part of ERC-20, but common in token contracts that allow new token creation
- `burn(address,uint256) returns(bool)` - Not part of ERC-20, but common in token contracts that allow token destruction
- `owner() returns(address)` - Not part of ERC-20, typically used for administrative purposes
- `allowedAddresses(address) returns(bool)` - Not part of ERC-20, custom functionality
- `halted() returns(bool)` - Not part of ERC-20, custom functionality

The provided list lacks the following ERC-20 functions:

- `transferFrom(address _from, address _to, uint256 _value) public returns (bool success)`
- `approve(address _spender, uint256 _value) public returns (bool success)`
- `allowance(address _owner, address _spender) public view returns (uint256 remaining)`

And the required ERC-20 events:

- `event Transfer(address indexed _from, address indexed _to, uint256 _value)`
- `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`

Additionally, the provided list includes several functions that are not part of the ERC-20 standard. These functions (`halt`, `unHalt`, `transferOwnership`, `constructor`, `addAllowedAddress`, `setCurrencyPricesContractAddress`, `fallback`, `sendToken`, `cancelOrder`, `updateTxStatus`, `getPurchaseRecord`, `getTxStatus`, `getCurrencyPrice`, `setEZOTokenPriceUSD`, `currencyPricesContract`, `ezoTokenPriceUSD`, `isEZOToken`) are likely specific to the contract's business logic and do not pertain to the ERC-20 token standard.

In conclusion, the provided list of function interfaces does not fully comply with the ERC-20 standard because it is missing some required functions (`transferFrom`, `approve`, `allowance`) and events (`Transfer`, `Approval`). Additionally, the `decimals` function should return `uint8` instead of `uint256` to be fully compliant. The additional functions and events present in the list are not part of the ERC-20 standard and represent custom functionality specific to the contract.