The provided Solidity code for the `mint` function and related parts of the `EZOToken` contract do not appear to violate the ERC-20 standard directly. However, there are a few points to consider:

1. The ERC-20 standard does not define a `mint` function. The `mint` function is an extension that is commonly used in token contracts to create new tokens. The ERC-20 standard only requires the `Transfer` event to be emitted when tokens are transferred, including when new tokens are created (with the `_from` address set to `0x0`). The provided `mint` function does emit a `Transfer` event with the `_from` address set to `0x0`, which is in line with the standard.

2. The `mint` function includes a `stopIfHalted` modifier, which is not part of the ERC-20 standard. This modifier is used to halt the contract in case of an emergency. This is a custom feature and does not conflict with the ERC-20 standard, as long as the contract's other functions comply with the standard when the contract is not halted.

3. The `mint` function has a requirement that `allowedAddresses[msg.sender]` must be `true`. This means that only certain addresses are allowed to mint new tokens. This is a custom access control mechanism and does not violate the ERC-20 standard, but it is important to ensure that this mechanism is well-documented and understood by users of the token.

4. The `mint` function uses `safeAdd` from the `SafeMath` contract to prevent overflow issues. This is a good practice and does not violate the ERC-20 standard.

5. The `mint` function returns a boolean value, which is in line with the ERC-20 standard's recommendation that functions should return a boolean to indicate success or failure.

6. The `mint` function emits a custom `Mint` event in addition to the required `Transfer` event. This is not part of the ERC-20 standard, but adding additional events does not violate the standard.

7. The `EZOToken` contract is missing some required functions and events from the ERC-20 standard, such as `approve`, `allowance`, `transfer`, and `transferFrom`, as well as the `Approval` event. For the contract to be fully ERC-20 compliant, these functions and events must be implemented.

In conclusion, the `mint` function itself does not violate the ERC-20 standard, but for the `EZOToken` contract to be considered ERC-20 compliant, it must implement all the required functions and events specified in the standard. Additionally, any custom behavior, such as the halting mechanism and access control for minting, should be clearly documented for users.