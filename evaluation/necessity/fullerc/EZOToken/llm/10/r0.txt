The provided Solidity code for the `EZOToken` contract appears to be an implementation of an ERC20 token with additional functionality. To determine whether the `transfer` function and related parts violate the ERC20 standard, we need to compare the implementation with the ERC20 specification.

Here are some key points from the ERC20 standard that are relevant to the `transfer` function:

1. The `transfer` function should transfer `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
2. The function SHOULD throw if the message callerâ€™s account balance does not have enough tokens to spend.
3. Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.

Now, let's analyze the provided `transfer` function:

- The `transfer` function in the provided code does not match the standard ERC20 signature. The standard signature is `function transfer(address _to, uint256 _value) public returns (bool success)`, but the provided function uses an additional parameter `_uniqueId` which is not part of the standard.
- The function does check for a non-zero `_value` and a valid `_uniqueId` (which should be `_to` in the standard), which is partially compliant with the standard.
- The function does emit a `Transfer` event, which is compliant with the standard.
- The function includes additional logic that is not part of the standard ERC20 `transfer` function, such as interacting with `PurchaseRecordsAll`, `CurrencyPrices`, and `Token` contracts, and handling return amounts. This additional logic could potentially introduce unexpected behavior that is not in line with the standard ERC20 token behavior.
- The function does not return a boolean value indicating the success of the transfer, which is required by the standard.

Based on the above points, the `transfer` function in the provided code does not fully comply with the ERC20 standard due to the following reasons:

1. The function signature is not compliant with the standard.
2. The function includes additional logic that is not specified in the standard.
3. The function does not return a boolean value indicating success or failure.

To make the `transfer` function compliant with the ERC20 standard, it would need to be modified to match the standard signature, remove the additional logic not specified in the standard, and return a boolean value indicating the success of the transfer. Additionally, any other functions and events that are part of the ERC20 standard should be implemented according to the specification.