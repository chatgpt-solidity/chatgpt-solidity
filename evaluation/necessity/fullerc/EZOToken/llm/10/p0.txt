Given a solidity code for function transfer and the related parts from a smart contract and a ERC.
Whether the function transfer and the related parts violate the given ERC? 

Function(and related parts) to audit:"""
contract EZOToken is ERC20, SafeMath, Haltable {

    mapping(address => PurchaseRecord) PurchaseRecordsAll;
    mapping(address => uint256) transactionStatus;
        0x92F87532eDB5e7fc43F0641b37c5687f7fc7F04a;
    address public currencyPricesContract =

    uint256 public ezoTokenPriceUSD = 100;

    address systemAddress = 0x2a3a91f51CA13a464500c2200E6D025a53d39Bbb;

    //mapping of token balances
    mapping(address => uint256) balances;

    // Function will transfer the tokens to investor's address
    function assignTokens(address sender, address to, uint256 tokens) internal {
        uint256 senderBalance = balances[sender];
        //Check sender have enough balance
        require(senderBalance >= tokens);
        senderBalance = safeSub(senderBalance, tokens);
        balances[sender] = senderBalance;
        balances[to] = safeAdd(balances[to], tokens);
    }

    function assignEther(address payable recipient, uint256 _amount) internal {
        require(recipient.send(_amount));
    }

    //  Transfer `value` EZO tokens from sender's account
    // `msg.sender` to provided account address `to`.
    // @param _value The number of EZO tokens to transfer
    // @return Whether the transfer was successful or not
    function transfer(
        address _uniqueId,
        uint _value
    ) public stopIfHalted returns (bool ok) {
        //validate receiver address and value.Not allow 0 value
        require(_uniqueId != address(0) && _value > 0);
        if (_uniqueId != systemAddress) {
            address payable _to = PurchaseRecordsAll[_uniqueId].sender;
            uint256 _valueCal = 0;
            uint256 senderBalance = 0;
            address curAddress = PurchaseRecordsAll[_uniqueId].currency;
            if (
                transactionStatus[_uniqueId] != 0 &&
                transactionStatus[_uniqueId] <= 2
            ) {
                require(transactionStatus[_uniqueId] == 1);
                _valueCal = safeDivv(
                    safeMul(
                        CurrencyPrices(currencyPricesContract).currencyPrices(
                            curAddress
                        ),
                        PurchaseRecordsAll[_uniqueId].amountSpent
                    ),
                    100
                );
                uint256 returnAmount = 0;
                if (_valueCal < _value) {
                    _valueCal = _valueCal;
                } else {
                    returnAmount = safeMul(
                        safeSub(_valueCal, _value),
                        ezoTokenPriceUSD
                    );
                    returnAmount = safeDiv(
                        safeDiv(
                            safeMull(returnAmount, 1),
                            CurrencyPrices(currencyPricesContract)
                                .currencyPrices(curAddress)
                        ),
                        100
                    );
                    _valueCal = _value;
                }
                assignTokens(msg.sender, _to, _valueCal);
                transactionStatus[_uniqueId] = 2;
                uint256 sentAmount = safeDiv(
                    safeMull(_valueCal, 1),
                    CurrencyPrices(currencyPricesContract).currencyPrices(
                        curAddress
                    )
                );
                emit Sell(
                    _uniqueId,
                    msg.sender,
                    _to,
                    _value,
                    _valueCal,
                    sentAmount,
                    returnAmount,
                    curAddress
                );
                emit Transfer(msg.sender, _to, _valueCal);
                if (curAddress == address(0)) {
                    assignEther(msg.sender, sentAmount);
                    if (returnAmount != 0) {
                        assignEther(_to, returnAmount);
                    }
                } else {
                    Token(curAddress).transfer(msg.sender, sentAmount);
                    if (returnAmount != 0) {
                        Token(curAddress).transfer(_to, returnAmount);
                    }
                }
                if (_valueCal < _value) {
                    emit Transfer(
                        msg.sender,
                        msg.sender,
                        safeSub(_value, _valueCal)
                    );
                }
                return true;
            } else {
                emit Transfer(msg.sender, _uniqueId, _value);
                emit Transfer(_uniqueId, msg.sender, _value);
                emit TransferUnknown(msg.sender, _uniqueId, _value);
            }
        } else {
            assignTokens(msg.sender, _uniqueId, _value);
            emit Transfer(msg.sender, _uniqueId, _value);
        }
    }
}

contract SafeMath {

    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }

    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function safeMull(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * 1 ether;
        assert(c / a == 1 ether);
        return c;
    }
    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function safeDivv(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / 1 ether;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
}

contract Haltable is Ownable {
    // @dev To Halt in Emergency Condition
    bool public halted = false;

    // @dev Use this as function modifier that should not execute if contract state Halted
    modifier stopIfHalted() {
        require(!halted);
        _;
    }
}
"""

ERC:"""
Simple Summary
A standard interface for tokens.

Abstract
The following standard allows for the implementation of a standard API for tokens within smart contracts. This standard provides basic functionality to transfer tokens, as well as allow tokens to be approved so they can be spent by another on-chain third party.

Motivation
A standard interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.

Specification

Token

Methods

NOTES:
The following specifications use syntax from Solidity 0.4.17 (or above). 
Callers MUST handle false from returns (bool success). Callers MUST NOT assume that false is never returned!

name
Returns the name of the token - e.g. "MyToken". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.
function name() public view returns (string)

symbol
Returns the symbol of the token. E.g. "HIX". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.
function symbol() public view returns (string)

decimals
Returns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation. OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.
function decimals() public view returns (uint8)

totalSupply
Returns the total token supply.
function totalSupply() public view returns (uint256)

balanceOf
Returns the account balance of another account with address _owner.
function balanceOf(address _owner) public view returns (uint256 balance)

transfer
Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transfer(address _to, uint256 _value) public returns (bool success)

transferFrom
Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event. The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)

approve
Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value. 
NOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. THOUGH The contract itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed before.
function approve(address _spender, uint256 _value) public returns (bool success)

allowance
Returns the amount which _spender is still allowed to withdraw from _owner.
function allowance(address _owner, address _spender) public view returns (uint256 remaining)

Events

Transfer
MUST trigger when tokens are transferred, including zero value transfers. A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.
event Transfer(address indexed _from, address indexed _to, uint256 _value)

Approval
MUST trigger on any successful call to approve(address _spender, uint256 _value).
event Approval(address indexed _owner, address indexed _spender, uint256 _value)

Implementation

There are already plenty of ERC20-compliant tokens deployed on the Ethereum network.
Different implementations have been written by various teams that have different trade-offs: from gas saving to improved security.

Example implementations are available at
- [OpenZeppelin implementation](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol)
- [ConsenSys implementation](https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/EIP20.sol)


History

Historical links related to this standard:

- Original proposal from Vitalik Buterin: https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs/499c882f3ec123537fc2fccd57eaa29e6032fe4a
- Reddit discussion: https://www.reddit.com/r/ethereum/comments/3n8fkn/lets_talk_about_the_coin_standard/
- Original Issue #20: https://github.com/ethereum/EIPs/issues/20

Copyright
Copyright and related rights waived via [CC0](../LICENSE.md).
"""