The function `setCurrencyPricesContractAddress` and the related parts provided in the Solidity code snippet do not directly violate the ERC-20 standard. The ERC-20 standard specifies a set of functions and events that a token contract must implement to be considered compliant. These include functions for transferring tokens, querying balances, and allowing tokens to be spent by approved third parties, as well as the corresponding events for transfers and approvals.

The function `setCurrencyPricesContractAddress` is a custom administrative function that allows the owner of the contract to set the address of a related contract, presumably one that handles currency prices. This function is not part of the ERC-20 standard, but adding additional functions to an ERC-20 token contract does not inherently violate the standard, as long as the required ERC-20 functions and events are correctly implemented and behave as specified.

However, there are a few points to consider regarding best practices and potential issues unrelated to ERC-20 compliance:

1. The provided code snippet has a syntax error: the line `0x92F87532eDB5e7fc43F0641b37c5687f7fc7F04a;` is not a valid Solidity statement. It appears to be an Ethereum address without a variable declaration or context.

2. The `require` statement in `setCurrencyPricesContractAddress` should return a message for better error handling, like so:
   ```solidity
   require(_currencyPricesContract != address(0), "Address cannot be the zero address");
   ```

3. The `onlyOwner` modifier is used to restrict the execution of `setCurrencyPricesContractAddress` to the owner of the contract. This is a common pattern for administrative functions.

4. It is important to ensure that the `currencyPricesContract` address is used securely within the `EZOToken` contract. Any interactions with the contract at this address should be carefully designed to prevent vulnerabilities, such as reentrancy attacks or unauthorized access.

5. The `Ownable` contract should have a mechanism to transfer ownership or renounce ownership to prevent the contract from being locked to a single owner forever.

6. The `EZOToken` contract should implement all the required ERC-20 functions and events. The snippet provided does not show these implementations, so it is not possible to determine from the given code whether the contract is fully ERC-20 compliant.

In summary, the `setCurrencyPricesContractAddress` function does not violate the ERC-20 standard, but the contract should be reviewed in its entirety to ensure full compliance with ERC-20 and to address any potential security concerns or best practice deviations.