The `sendToken` function in the provided Solidity code is designed to transfer tokens from the caller's address to the contract itself and then record the purchase data. To evaluate whether this function violates the given ERC (which is the ERC-20 standard), we need to check if it adheres to the ERC-20 token transfer rules and event emissions.

Here are some key points to consider:

1. **TransferFrom Method**: The `sendToken` function uses the `transferFrom` method to transfer tokens from the caller to the contract. According to the ERC-20 standard, `transferFrom` should only be called after the token owner has approved the spender (in this case, the contract) to spend a certain amount of tokens on their behalf. The code does not show any checks or interactions related to the `approve` function, which could be a concern if the contract assumes that approval has already been given.

2. **Event Emission**: The ERC-20 standard requires that a `Transfer` event is emitted whenever tokens are transferred, including by the `transferFrom` method. The provided code emits a custom event `sendTokenForEZO` instead of the standard `Transfer` event. This is a violation of the ERC-20 standard, as it does not properly emit the required `Transfer` event.

3. **Error Handling**: The ERC-20 standard specifies that functions should throw an error if the transfer or approval fails. The `sendToken` function uses `require` to ensure that the `transferFrom` call does not fail, which is in line with the standard.

4. **Return Values**: The ERC-20 standard states that the `transfer` and `transferFrom` functions must return a boolean value indicating success or failure. The `sendToken` function does not have a return value, but since it is not directly implementing the `transferFrom` function, this is not a violation. However, it is important to note that the `sendToken` function should handle the boolean return value from the `transferFrom` call correctly, which it does by using `require`.

5. **Function Visibility and Access**: The `sendToken` function is marked as `public`, which means it can be called by anyone. This is not a direct violation of the ERC-20 standard, but it is important to ensure that appropriate access controls are in place to prevent unauthorized or unintended use.

In summary, the `sendToken` function violates the ERC-20 standard by not emitting the required `Transfer` event. Additionally, while not shown in the provided code, the function assumes that the caller has already been approved to spend tokens on behalf of the token owner, which could lead to issues if not handled correctly. The function should be modified to emit the `Transfer` event as per the ERC-20 standard and ensure that the approval process is correctly managed.