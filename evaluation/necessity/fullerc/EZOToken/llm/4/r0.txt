The function `addAllowedAddress` in the provided Solidity code is not part of the ERC-20 standard. The ERC-20 standard specifies a set of functions and events that a compliant token contract must implement to enable interoperability across different applications and services within the Ethereum ecosystem. The standard includes functions for transferring tokens, querying balances, and allowing others to spend tokens on behalf of the token holder.

The `addAllowedAddress` function seems to be a custom function that allows the contract owner to maintain a list of addresses that are either allowed or disallowed to interact with the contract in some way. This is not a requirement of the ERC-20 standard and does not violate the standard, as the standard does not prohibit the addition of custom functions.

However, it is important to note that adding custom functions and state variables to an ERC-20 token contract can affect the token's behavior and how it interacts with other contracts and services. If the `allowedAddresses` mapping is used to restrict standard ERC-20 functions such as `transfer` or `transferFrom`, then it could potentially violate the standard if it prevents these functions from behaving as expected.

For example, if the `transfer` function checks the `allowedAddresses` mapping and disallows transfers to or from certain addresses, this would not be compliant with the ERC-20 standard, which requires that transfers should only fail if the sender does not have enough balance.

In summary, the `addAllowedAddress` function itself does not violate the ERC-20 standard, but depending on how the `allowedAddresses` mapping is used within the contract, it could lead to non-compliant behavior. It is essential to review the entire contract code to determine if the standard's requirements are fully met.