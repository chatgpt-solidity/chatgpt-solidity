contract SilkToken is owned, TokenERC20 {

    mapping(address => bool) public frozenAccount;
    uint256 public limitAMT = 0;
    bool public isPreSales = false;
    uint256 public buyPrice = 1000000000000000000; // Initialization with default value

    /// @notice Process presales transactions
    function procPreSales() public payable returns (uint256) {
        require(isPreSales == true);
        uint256 amount = msg.value / buyPrice; // calculates the amount
        amount = amount * 10 ** uint256(decimals); // calculates the amount
        if (balanceOf[owner] - amount <= limitAMT) {
            isPreSales = false;
        }
        _transfer(owner, msg.sender, amount);
        owner.transfer(msg.value);
        return amount;
    }

    /* Internal transfer, only can be called by this contract */
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead
        require(balanceOf[_from] >= _value); // Check if the sender has enough
        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows
        require(!frozenAccount[_from]); // Check if sender is frozen
        require(!frozenAccount[_to]); // Check if recipient is frozen
        balanceOf[_from] -= _value; // Subtract from the sender
        balanceOf[_to] += _value; // Add the same to the recipient
        Transfer(_from, _to, _value);
    }
}

contract owned {
    address public owner;
}

contract TokenERC20 {

    // This creates an array with all balances
    mapping(address => uint256) public balanceOf;
    uint8 public decimals = 18;
}

