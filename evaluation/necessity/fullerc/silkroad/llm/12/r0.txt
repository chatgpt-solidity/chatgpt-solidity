The provided Solidity code for the `stopPreSales` function and the related parts from the `SilkToken` smart contract do not directly interact with the ERC-20 token standard interface. The ERC-20 standard specifies a set of functions and events that a compliant token contract must implement to enable interoperability with other contracts and clients, such as wallets and exchanges.

The ERC-20 standard includes the following functions and events:

- `name()`
- `symbol()`
- `decimals()`
- `totalSupply()`
- `balanceOf(address _owner)`
- `transfer(address _to, uint256 _value)`
- `transferFrom(address _from, address _to, uint256 _value)`
- `approve(address _spender, uint256 _value)`
- `allowance(address _owner, address _spender)`
- `Transfer` event
- `Approval` event

The `stopPreSales` function in the `SilkToken` contract is a custom function that is not part of the ERC-20 standard. It is used to change the state of the `isPreSales` boolean variable, which is likely used to control some aspects of the token's behavior during a presale period. This function is only callable by the owner of the contract, as enforced by the `onlyOwner` modifier in the `owned` contract.

Since the ERC-20 standard does not dictate how a token's presale or other business logic should be managed, the `stopPreSales` function does not violate the ERC-20 standard. It is an additional feature that the contract developers have implemented for their specific use case.

However, it is important to note that while the `stopPreSales` function does not violate the ERC-20 standard, the overall contract must still implement all the required functions and events of the ERC-20 standard to be considered compliant. The provided code snippet does not include the implementation of the ERC-20 functions, so it is not possible to determine from the given information whether the `SilkToken` contract is fully ERC-20 compliant. The contract must include the full implementation of the ERC-20 interface to be considered a valid ERC-20 token.