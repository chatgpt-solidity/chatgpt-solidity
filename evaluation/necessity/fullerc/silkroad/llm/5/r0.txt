The `burnFrom` function in the provided Solidity code is designed to allow a user to burn tokens from another user's account, given that they have an allowance set by the token owner. This function is not part of the standard ERC-20 interface, which includes the following methods and events:

- `totalSupply`
- `balanceOf`
- `transfer`
- `transferFrom`
- `approve`
- `allowance`
- `Transfer` event
- `Approval` event

The ERC-20 standard does not specify a `burn` or `burnFrom` function. However, it is common for token contracts to implement additional functionality beyond the basic ERC-20 standard. The `burnFrom` function is an example of such an extension, allowing tokens to be permanently removed from circulation.

The provided `burnFrom` function does not violate the ERC-20 standard, as it does not interfere with the standard's required functions and events. It is an additional feature that token contracts may choose to include. However, it is important to note that any extensions to the ERC-20 standard should be clearly documented and communicated to users, as they may not be supported by all wallets and interfaces that expect strict adherence to the standard.

One thing to note is that the `burnFrom` function should emit a `Transfer` event with the `_to` address set to the zero address (`0x0`) to indicate that tokens are being burned (removed from circulation), as per the ERC-20 specification that states a `Transfer` event should be triggered when tokens are transferred, including when they are created or burned.

The code provided does not show the `Transfer` event being emitted in the `burnFrom` function. To be fully compliant with the ERC-20 standard when burning tokens, the function should be modified to include this event:

```solidity
event Transfer(address indexed _from, address indexed _to, uint256 _value);

function burnFrom(address _from, uint256 _value) public returns (bool success) {
    // ... existing code ...
    totalSupply -= _value; // Update totalSupply
    emit Transfer(_from, address(0), _value); // Emit a Transfer event to the zero address
    return true;
}
```

By adding the `emit Transfer(_from, address(0), _value);` line, the contract will now properly emit a `Transfer` event when tokens are burned, which is a good practice for ERC-20 token contracts that implement a burn mechanism.