The provided Solidity event interfaces are:

```
event Transfer(address indexed, address indexed, uint256);
event Burn(address indexed, uint256);
event FrozenFunds(address, bool);
```

The given ERC (Ethereum Request for Comments) appears to be describing the ERC-20 standard, which is a standard interface for fungible tokens on the Ethereum blockchain.

According to the ERC-20 standard, the required events are:

```
event Transfer(address indexed _from, address indexed _to, uint256 _value);
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
```

Now, let's compare the provided event interfaces with the ERC-20 standard:

1. `event Transfer(address indexed, address indexed, uint256);`
   - This event matches the ERC-20 `Transfer` event specification. It has the correct parameters and indexed attributes.

2. `event Burn(address indexed, uint256);`
   - This event is not part of the ERC-20 standard. However, including additional events does not violate the standard. The `Burn` event is commonly used in token contracts to indicate that a certain amount of tokens has been permanently removed from circulation.

3. `event FrozenFunds(address, bool);`
   - This event is also not part of the ERC-20 standard. It seems to indicate that an account's funds have been frozen or unfrozen. Including this event does not violate the ERC-20 standard, but it is an additional feature that is not required by the standard.

The ERC-20 standard does not prohibit the inclusion of additional events or functions beyond what is specified. However, to be compliant with ERC-20, a token contract must implement all the required functions and events. In this case, the provided event interfaces do not violate the ERC-20 standard, but the contract would need to include the `Approval` event to be fully compliant.

It's important to note that the provided code snippet only includes events and does not show any functions. To fully assess ERC-20 compliance, we would need to see the implementation of the required functions as well.