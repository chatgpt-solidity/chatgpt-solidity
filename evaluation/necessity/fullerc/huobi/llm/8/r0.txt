The provided Solidity event interfaces:

```solidity
event Transfer(address indexed, address indexed, uint256);
event Approval(address indexed, address indexed, uint256);
```

These events match the ERC-20 token standard's event specifications:

```solidity
event Transfer(address indexed _from, address indexed _to, uint256 _value);
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
```

The ERC-20 standard specifies that the `Transfer` event must trigger when tokens are transferred, including zero value transfers, and the `Approval` event must trigger on any successful call to `approve(address _spender, uint256 _value)`.

The provided event interfaces have the correct parameters and indexed parameters as required by the ERC-20 standard. Therefore, based on the event interfaces alone, there is no violation of the ERC-20 standard.

However, it is important to note that compliance with the ERC-20 standard is not determined solely by the event interfaces. The contract must also implement the specified functions correctly and adhere to the behavior described in the ERC-20 standard. This includes functions like `transfer`, `transferFrom`, `approve`, `allowance`, `balanceOf`, and `totalSupply`, as well as their expected behaviors and return values.

To fully determine if a smart contract violates the ERC-20 standard, you would need to review the entire contract code, not just the event interfaces.