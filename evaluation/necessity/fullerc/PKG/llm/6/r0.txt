The `burnFrom` function in the provided Solidity code is not part of the ERC-20 standard. The ERC-20 standard specifies a set of functions and events that a compliant token should implement, which includes `totalSupply`, `balanceOf`, `transfer`, `transferFrom`, `approve`, and `allowance`, along with the `Transfer` and `Approval` events.

The `burnFrom` function is an extension to the ERC-20 standard that allows tokens to be "burned" or destroyed, reducing the total supply of tokens. This is a common feature in many token contracts but is not required by the ERC-20 standard itself.

However, the `burnFrom` function should still adhere to the principles of the ERC-20 standard when it comes to altering balances and allowances. The function correctly checks that the `_from` address has enough balance to burn the `_value` amount of tokens and that the `msg.sender` has enough allowance to burn the tokens on behalf of `_from`. It then decreases the balance and allowance accordingly and reduces the `totalSupply`. It also emits a `Burn` event, which is not part of the ERC-20 standard but is a common practice for burnable tokens.

One thing to note is that the ERC-20 standard requires the `Transfer` event to be emitted when tokens are transferred, including when they are created or burned. The provided `burnFrom` function does not emit the `Transfer` event with the `_to` address set to the zero address (`0x0`), which is a common way to indicate that tokens have been burned. To fully comply with the ERC-20 standard, the `burnFrom` function should emit a `Transfer` event with `_from` as the source and the zero address as the destination, along with the `_value` that was burned.

Here's how you might modify the `burnFrom` function to include the `Transfer` event:

```solidity
event Transfer(address indexed _from, address indexed _to, uint256 _value);

function burnFrom(
    address _from,
    uint256 _value
) public returns (bool success) {
    require(balanceOf[_from] >= _value);
    require(_value <= allowance[_from][msg.sender]);
    balanceOf[_from] -= _value;
    allowance[_from][msg.sender] -= _value;
    totalSupply -= _value;
    Burn(_from, _value);
    Transfer(_from, address(0), _value); // Emit the Transfer event to the zero address
    return true;
}
```

In summary, the `burnFrom` function does not violate the ERC-20 standard, but it is an extension to the standard. To fully comply with the ERC-20 event emission requirements, it should also emit a `Transfer` event when tokens are burned.