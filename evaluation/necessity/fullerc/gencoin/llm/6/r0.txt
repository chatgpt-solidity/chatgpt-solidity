Based on the provided Solidity code for the `GEIMCOIN` contract and the related parts from a smart contract, and comparing it with the ERC-20 token standard (which is the implied standard based on the context), we can make the following observations:

1. The `GEIMCOIN` contract appears to be an implementation of an ERC-20 token, as it inherits from a `StandardToken` contract which likely implements the ERC-20 interface.

2. The ERC-20 standard specifies a set of methods and events that a compliant token should implement. The provided code snippet does not show the implementation of all required methods and events, such as `transfer`, `transferFrom`, `approve`, `allowance`, `Transfer` event, and `Approval` event. However, since `GEIMCOIN` inherits from `StandardToken`, it is possible that these methods and events are implemented in the `StandardToken` contract.

3. The `GEIMCOIN` constructor sets initial values for `balances`, `totalSupply`, `name`, `decimals`, `symbol`, `unitsOneEthCanBuy`, and `fundsWallet`. This is acceptable as long as the `totalSupply` and `balances` are correctly managed and the `Transfer` event is emitted when tokens are created if the `from` address is `0x0`.

4. The `unitsOneEthCanBuy` variable is not part of the ERC-20 standard. It seems to be a custom variable that might be used for an initial coin offering (ICO) or a crowdsale where it defines how many tokens one Ether can buy. This does not violate the ERC-20 standard, but it is additional functionality beyond the standard.

5. The `fundsWallet` variable is also not part of the ERC-20 standard. It is likely used to store the address where the Ether received from the token sale will be sent. This is a common practice in ICOs and does not violate the ERC-20 standard.

6. The ERC-20 standard does not enforce any specific logic for the constructor or token initialization. It only requires that the token contract implements the specified methods and events.

7. The `name`, `symbol`, and `decimals` are optional in the ERC-20 standard, but if they are present, they should be public view functions that return the respective values. In the provided code, they are implemented as public state variables, which is also acceptable in Solidity as it automatically creates getter functions for public variables.

In conclusion, based on the provided code snippet, there is no clear violation of the ERC-20 standard. However, to fully confirm compliance, the entire `StandardToken` contract would need to be reviewed to ensure that all required methods and events are correctly implemented. Additionally, it is important to ensure that the custom functionality (like `unitsOneEthCanBuy` and `fundsWallet`) does not interfere with the standard ERC-20 behavior.