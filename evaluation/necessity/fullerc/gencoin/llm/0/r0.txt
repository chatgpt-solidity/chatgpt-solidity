The provided Solidity function `transfer` is intended to be part of an ERC-20 token contract, which is a standard interface for Ethereum tokens. To determine if the function complies with the ERC-20 standard, we need to compare it against the ERC-20 specification provided.

Here is the relevant part of the ERC-20 specification for the `transfer` function:

```
transfer
Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transfer(address _to, uint256 _value) public returns (bool success)
```

Now, let's analyze the provided `transfer` function:

```solidity
function transfer(address _to, uint256 _value) returns (bool success) {
    if (balances[msg.sender] >= _value && _value > 0) {
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    } else {
        return false;
    }
}
```

Here are the points of compliance and potential issues:

1. **Transfers _value amount of tokens to address _to**: The function correctly transfers the `_value` amount of tokens to the `_to` address if the sender has enough balance.

2. **MUST fire the Transfer event**: The function correctly fires the `Transfer` event when tokens are transferred.

3. **SHOULD throw if the message caller’s account balance does not have enough tokens to spend**: The function returns `false` instead of throwing an error if the sender does not have enough tokens. According to the ERC-20 standard, the function should throw an error to indicate the transfer failed due to insufficient balance. This is typically done using `require` in Solidity, which reverts the transaction if the condition is not met.

4. **Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event**: The function incorrectly checks `_value > 0` and will return `false` without firing the `Transfer` event for transfers of 0 value. According to the ERC-20 standard, transfers of 0 value should be treated as normal transfers and should fire the `Transfer` event.

To make the `transfer` function fully compliant with the ERC-20 standard, the following changes should be made:

- Replace the `if` condition with a `require` statement to ensure that the function throws an error if the sender does not have enough balance.
- Remove the `_value > 0` condition to allow transfers of 0 value to proceed and fire the `Transfer` event.

The corrected `transfer` function would look like this:

```solidity
function transfer(address _to, uint256 _value) public returns (bool success) {
    require(balances[msg.sender] >= _value, "Insufficient balance");
    balances[msg.sender] -= _value;
    balances[_to] += _value;
    emit Transfer(msg.sender, _to, _value);
    return true;
}
```

Note that the `emit` keyword is used for firing events in Solidity 0.4.21 and later versions. If the contract is using an older version of Solidity, the `emit` keyword may not be necessary.