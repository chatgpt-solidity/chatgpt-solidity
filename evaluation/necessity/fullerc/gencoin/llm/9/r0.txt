The provided Solidity function interfaces are meant to be compared against the ERC-20 token standard, which is the most common standard for Ethereum tokens. The ERC-20 standard specifies a set of functions and events that a compliant token contract must implement.

Let's compare the provided interfaces with the ERC-20 standard:

1. `transfer(address,uint256) returns(bool)` - **Compliant**
2. `transferFrom(address,address,uint256) returns(bool)` - **Compliant**
3. `balanceOf(address) returns(uint256)` - **Compliant**
4. `approve(address,uint256) returns(bool)` - **Compliant**
5. `allowance(address,address) returns(uint256)` - **Compliant**
6. `totalSupply() returns(uint256)` - **Compliant**
7. `GEIMCOIN() returns()` - **Not part of ERC-20**
8. `fallback() returns()` - **Not part of ERC-20**, and the fallback function should not have a return type.
9. `approveAndCall(address,uint256,bytes) returns(bool)` - **Not part of ERC-20**
10. `name() returns(string)` - **Optional in ERC-20**
11. `decimals() returns(uint8)` - **Optional in ERC-20**
12. `fundsWallet() returns(address)` - **Not part of ERC-20**
13. `symbol() returns(string)` - **Optional in ERC-20**
14. `unitsOneEthCanBuy() returns(uint256)` - **Not part of ERC-20**
15. `version() returns(string)` - **Not part of ERC-20**
16. `totalEthInWei() returns(uint256)` - **Not part of ERC-20**
17. `totalSupply() returns(uint256)` - **Duplicate and Compliant**

The ERC-20 standard also requires two events:
- `event Transfer(address indexed _from, address indexed _to, uint256 _value)`
- `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`

These events are not listed in the provided interfaces, but they are essential for a contract to be ERC-20 compliant. The contract must emit these events in the corresponding functions (`transfer`, `transferFrom`, and `approve`).

In summary, the provided list of functions includes all the necessary ERC-20 functions, some optional ones, and several additional functions that are not part of the ERC-20 standard. The additional functions do not necessarily make the contract non-compliant, but they are not required by the standard. However, the lack of the `Transfer` and `Approval` events in the provided list would make the contract non-compliant if they are not implemented in the actual contract. Additionally, the `fallback` function should not have a return type, as it is meant to handle plain Ether transfers and should be marked as `external payable` with no return value in Solidity 0.6.0 and above.