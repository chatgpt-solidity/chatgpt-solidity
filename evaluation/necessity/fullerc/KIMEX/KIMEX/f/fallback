contract KIMEX is Owner {
    address public walletAddress;

    mapping(address => uint256) internal balances;
    mapping(address => uint256) public totalInvestedAmountOf;
    uint256 totalInvestedAmount;

    uint256 public totalRemainingTokensForSales; // Total tokens remaining for sales

    uint saleState;
    uint256 public constant minInvestedAmount = 0.1 * 10 ** 18; // 0.1 ether for mininum ether contribution per transaction
    uint constant END_SALE = 2; // End sales
    uint constant IN_SALE = 1; // In sales
    bool public isSelling;
    bool public inActive;
    uint256 public icoStandardPrice;

    // Issue tokens to normal investors through ICO rounds
    function issueTokensForICO(uint _state) private {
        uint256 price = icoStandardPrice;
        issueTokens(price, _state);
    }

    modifier isActive() {
        require(inActive == false);
        _;
    }

    modifier isInSale() {
        require(isSelling == true);
        _;
    }

    // Fallback function for token purchasing
    function() external payable isActive isInSale {
        uint state = getCurrentState();
        require(state < END_SALE);
        require(msg.value >= minInvestedAmount);

        if (state <= IN_SALE) {
            return issueTokensForICO(state);
        }
        revert();
    }

    // Get current sales state
    function getCurrentState() public view returns (uint256) {
        return saleState;
    }

    // Issue tokens to investors and transfer ether to wallet
    function issueTokens(uint256 _price, uint _state) private {
        require(walletAddress != address(0));

        uint tokenAmount = msg.value.mul(_price).mul(10 ** 18).div(1 ether);
        balances[msg.sender] = balances[msg.sender].add(tokenAmount);
        totalInvestedAmountOf[msg.sender] = totalInvestedAmountOf[msg.sender]
            .add(msg.value);
        totalRemainingTokensForSales = totalRemainingTokensForSales.sub(
            tokenAmount
        );
        totalInvestedAmount = totalInvestedAmount.add(msg.value);
        walletAddress.transfer(msg.value);
        emit IssueTokens(msg.sender, msg.value, tokenAmount, _state);
    }
}

library SafeMath {
    /**
     * @dev Multiplies two numbers, throws on overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    /**
     * @dev Adds two numbers, throws on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }

    /**
     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    /**
     * @dev Integer division of two numbers, truncating the quotient.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
}

