contract KIMEX is Owner {
    uint public founderAllocatedTime = 1;

    uint saleState;
    address public founderAddress;
    uint256 public constant founderAllocation = 50000000 * 10 ** 18; // 50 mil tokens allocated for founders

    mapping(address => uint256) internal balances;
    uint constant END_SALE = 2; // End sales

    address public adminAddress;
    bool public inActive;

    modifier isActive() {
        require(inActive == false);
        _;
    }

    modifier onlyOwnerOrAdmin() {
        require(msg.sender == owner || msg.sender == adminAddress);
        _;
    }

    // Allocate tokens for founder vested gradually for 1 year
    function allocateTokensForFounder() external isActive onlyOwnerOrAdmin {
        require(saleState == END_SALE);
        require(founderAddress != address(0));
        uint256 amount;
        if (founderAllocatedTime == 1) {
            amount = founderAllocation;
            balances[founderAddress] = balances[founderAddress].add(amount);
            emit AllocateTokensForFounder(
                founderAddress,
                founderAllocatedTime,
                amount
            );
            founderAllocatedTime = 2;
            return;
        }
        revert();
    }
}

contract Owner {
    address public owner;
}

library SafeMath {

    /**
     * @dev Adds two numbers, throws on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

