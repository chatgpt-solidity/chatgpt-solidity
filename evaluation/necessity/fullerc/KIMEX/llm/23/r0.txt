The `balanceOf` function provided in the KIMEX contract code snippet appears to be compliant with the ERC-20 token standard as described in the ERC documentation you've provided. The ERC-20 standard specifies that the `balanceOf` function should:

- Accept an address `_owner` as a parameter.
- Return the balance of the `_owner` address.

The `balanceOf` function in the KIMEX contract does exactly that. It takes an address `_owner` and returns the balance associated with that address from the `balances` mapping.

However, there are a couple of minor issues that could be improved upon:

1. The `constant` keyword is used in the function declaration. In Solidity versions 0.4.17 and above, the `constant` keyword is deprecated in favor of `view` and `pure` for functions that do not modify the state. The `constant` keyword should be replaced with `view` to reflect the latest best practices and to avoid confusion, as `constant` suggests that the function does not modify the state and only reads from it.

2. The ERC-20 standard specifies that the `balanceOf` function should be `public` and `view`. In the provided code snippet, the function is marked as `external`. While `external` functions can only be called from outside the contract and are slightly more gas-efficient when called externally, `public` functions can be called both internally and externally. This is a minor difference and does not violate the standard, but it's worth noting that the ERC-20 standard's example uses `public`.

Here's a revised version of the `balanceOf` function that aligns with the latest Solidity best practices:

```solidity
function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
}
```

Other than these minor points, the `balanceOf` function does not violate the ERC-20 standard as described in the provided documentation.