The provided Solidity code for the `KIMEX` contract does not appear to implement the ERC-20 token standard directly. The ERC-20 standard specifies a set of functions and events that a compliant token contract must implement to be considered an ERC-20 token. These include:

- `name()`
- `symbol()`
- `decimals()`
- `totalSupply()`
- `balanceOf(address _owner)`
- `transfer(address _to, uint256 _value)`
- `transferFrom(address _from, address _to, uint256 _value)`
- `approve(address _spender, uint256 _value)`
- `allowance(address _owner, address _spender)`
- `Transfer` event
- `Approval` event

The `KIMEX` contract code provided does not contain any of these functions or events. Instead, it seems to be a contract related to the allocation of tokens for sales and reserved purposes, with an `Owner` contract that sets the owner of the `KIMEX` contract.

Since the `KIMEX` contract does not implement the ERC-20 interface, it does not violate the ERC-20 standard; it simply is not an ERC-20 token. If the intention was for `KIMEX` to be an ERC-20 token, then the contract is missing the necessary functions and events to be compliant with the standard.

To make the `KIMEX` contract ERC-20 compliant, you would need to implement all the required functions and events as specified in the ERC-20 standard. Additionally, you would need to manage the token balances and ensure that the `transfer`, `transferFrom`, `approve`, and `allowance` functions behave according to the standard's requirements.

It's important to note that the `KIMEX` contract could be part of a larger system where another contract implements the ERC-20 standard, and `KIMEX` is used for a different purpose within that system. Without the full context of the entire system, it's not possible to determine the overall compliance with the ERC-20 standard.