The provided Solidity code for the `enableTokenTransfer` function and related parts of the `KIMEX` contract do not directly violate the ERC-20 standard as described in the provided ERC documentation. However, there are some considerations to take into account:

1. The ERC-20 standard does not specify any mechanism to enable or disable token transfers. The standard only outlines the functions and events that a compliant token should implement, such as `transfer`, `transferFrom`, `approve`, `allowance`, and the corresponding events `Transfer` and `Approval`.

2. The `isTransferable` boolean flag in the `KIMEX` contract is a custom feature that is not part of the ERC-20 standard. If the intention is to restrict token transfers until a certain condition is met (e.g., the end of an ICO period), this is a design choice that is outside the scope of the standard. However, it is important to ensure that the `transfer` and `transferFrom` functions respect this flag and only allow transfers when `isTransferable` is `true`. This is not shown in the provided code, but it would be necessary to comply with the intended behavior of the `enableTokenTransfer` function.

3. The `inActive` boolean flag and the `isActive` modifier are also custom features not specified in the ERC-20 standard. They seem to be used to control whether certain functions can be executed based on the contract's active state. Again, this is a design choice and does not inherently violate the ERC-20 standard, but it must be implemented correctly in all relevant functions to ensure the contract behaves as intended.

4. The `onlyOwner` modifier from the `Owner` contract ensures that only the owner of the contract can call the `enableTokenTransfer` function. This is a common pattern for administrative functions in smart contracts and does not violate the ERC-20 standard.

In summary, while the `enableTokenTransfer` function and related parts do not violate the ERC-20 standard, it is crucial to ensure that the custom features (like `isTransferable` and `inActive`) are integrated properly with the standard ERC-20 functions (`transfer`, `transferFrom`, etc.) to maintain compliance with the standard's requirements for token transfers. If the `transfer` and `transferFrom` functions are not shown in the provided code, they should be reviewed to ensure they adhere to the standard and respect the custom flags.