The provided `transferFrom` function in the `MyToken` contract appears to be an implementation of the ERC-20 token standard's `transferFrom` method. To determine if the function violates the given ERC-20 standard, we need to compare the implementation with the ERC-20 specification.

Here are the key points from the ERC-20 standard regarding the `transferFrom` method:

1. Transfers `_value` amount of tokens from address `_from` to address `_to`.
2. MUST fire the `Transfer` event.
3. The function SHOULD throw if the `_from` account has not authorized the sender of the message via some mechanism.
4. Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.

Now, let's analyze the provided `transferFrom` function:

```solidity
function transferFrom(
    address _from,
    address _to,
    uint256 _value
) returns (bool success) {
    if (balanceOf[_from] < _value) throw; // Check if the sender has enough
    if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
    if (_value > allowance[_from][msg.sender]) throw; // Check allowance
    balanceOf[_from] -= _value; // Subtract from the sender
    balanceOf[_to] += _value; // Add the same to the recipient
    allowance[_from][msg.sender] -= _value;
    Transfer(_from, _to, _value);
    return true;
}
```

The function checks if the `_from` address has enough balance and if the `_to` address will not overflow as a result of the transfer. It also checks if the `msg.sender` has been authorized to transfer the specified `_value` of tokens from the `_from` address. If any of these conditions are not met, the function will throw an error, which is consistent with the ERC-20 standard's requirement that the function should throw if the conditions are not satisfied.

However, there are a few issues with the provided code:

1. The use of `throw` is deprecated in newer versions of Solidity. Instead, `require` statements should be used to check conditions and revert the transaction if the conditions are not met.

2. The `Transfer` event is not defined in the provided code snippet. According to the ERC-20 standard, the `Transfer` event must be declared and emitted. The event should be defined as follows:
   ```solidity
   event Transfer(address indexed _from, address indexed _to, uint256 _value);
   ```

3. The function signature does not include the `public` visibility specifier, which is required for the function to be callable by external contracts and transactions.

4. The function should return `bool success`, but the return type is not explicitly declared in the function signature. It should be:
   ```solidity
   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)
   ```

5. The function does not handle the case where `_value` is zero. According to the ERC-20 standard, transfers of 0 values must be treated as normal transfers and fire the `Transfer` event. The provided code does not violate this rule, but it's worth mentioning as a point of attention.

In conclusion, the provided `transferFrom` function mostly adheres to the ERC-20 standard, but it uses deprecated Solidity syntax (`throw`) and lacks the `public` visibility specifier and explicit return type in the function signature. The `Transfer` event must also be properly defined and emitted. These issues should be addressed to ensure full compliance with the ERC-20 standard and to avoid potential problems with contract interoperability.