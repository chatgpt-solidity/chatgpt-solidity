The provided Solidity function `transfer` in the `MyToken` contract is intended to transfer tokens from the message sender's account to another account. However, there are several issues with the implementation when compared to the ERC-20 token standard (which is the implied standard based on the context of the ERC provided):

1. **Return Type**: The ERC-20 standard specifies that the `transfer` function should return a boolean value indicating success or failure. The provided function does not return any value.

2. **Error Handling**: The ERC-20 standard suggests that functions should return `false` on failure rather than throwing an exception. The provided function uses `throw` for error handling, which is an outdated pattern in Solidity. The modern approach is to use `require` statements that revert the transaction and return the remaining gas to the caller.

3. **Transfer Event**: The ERC-20 standard requires that a `Transfer` event is emitted when tokens are transferred. The provided function does emit a `Transfer` event, but the event is not defined in the provided code snippet. It should be defined as follows to comply with the standard:
   ```solidity
   event Transfer(address indexed _from, address indexed _to, uint256 _value);
   ```
   Additionally, the event should be emitted after the state changes to prevent reentrancy attacks.

4. **Function Visibility**: The ERC-20 standard does not specify the visibility of functions. However, it is a good practice to explicitly state the visibility of functions. In Solidity 0.4.17 and above, functions are public by default, but it is recommended to explicitly declare the visibility as `public` for clarity.

5. **SafeMath Library**: The provided function does not use the SafeMath library for arithmetic operations, which can help prevent overflows and underflows. This is not a direct violation of the ERC-20 standard, but it is a recommended practice for security.

Here is a revised version of the `transfer` function that would be more compliant with the ERC-20 standard:

```solidity
pragma solidity ^0.4.17;

import "./SafeMath.sol"; // Import SafeMath library

contract MyToken {
    using SafeMath for uint256;

    mapping(address => uint256) public balanceOf;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        require(balanceOf[_to].add(_value) >= balanceOf[_to], "Overflow detected");

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
}
```

In this revised version, the `throw` statements have been replaced with `require` statements, a return type of `bool` has been added to the `transfer` function, and the SafeMath library is used for safe arithmetic operations. The `Transfer` event is also explicitly defined and emitted after the state changes.