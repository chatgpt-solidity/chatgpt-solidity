The provided Solidity code for the `totalSupply` function in the `CMBToken` contract appears to be compliant with the ERC-20 token standard as described in the provided ERC documentation. Here's a breakdown of the compliance:

1. The ERC-20 standard specifies that the `totalSupply` function should return the total token supply. The provided function does exactly that by returning the value of `_totalSupply`.

2. The function is marked as `constant` in the provided code, which is equivalent to `view` in more recent versions of Solidity. This is correct because the `totalSupply` function should not modify the state and should be callable externally to view the total supply of tokens.

3. The ERC-20 standard does not require the `totalSupply` to be a constant value; it can be variable if the token supply is designed to change over time. However, in this case, the `_totalSupply` is declared as a constant with a fixed value, which is also acceptable as long as the token's design does not require a mutable supply.

4. The ERC-20 standard does not specify the visibility of the `totalSupply` function, but it is implied that it should be public. In the provided code, the visibility is not explicitly stated, but by default, functions are public in Solidity if no visibility is specified.

5. The ERC-20 standard does not enforce naming conventions for the variable holding the total supply. The provided code uses `_totalSupply`, which is an internal naming convention and does not conflict with the standard.

6. The ERC-20 standard requires that the `totalSupply` function should not have side effects or require any specific permissions to call. The provided function complies with this requirement.

Based on the provided code and the ERC-20 standard documentation, there are no violations in the `totalSupply` function implementation. However, it is important to note that the provided code snippet is only a small part of the contract, and full compliance with the ERC-20 standard would require implementing all the specified functions and events, including `balanceOf`, `transfer`, `transferFrom`, `approve`, `allowance`, and the `Transfer` and `Approval` events.

Additionally, the provided code is using an older version of Solidity syntax (e.g., `constant` instead of `view`). It is recommended to use the latest Solidity version and best practices for contract development to ensure security and compatibility.