The provided Solidity code defines a `MintableToken` contract that inherits from `StandardToken` and `Ownable`. The `finishMinting` function is designed to stop the minting of new tokens by setting the `mintingFinished` boolean to `true`.

The ERC-20 standard, which is the most likely candidate for the "given ERC" mentioned in the question, does not specify anything about minting or finishing the minting process. ERC-20 focuses on the transfer of tokens, allowances for third-party transfers, and the general ledger of token ownership. It defines a set of methods and events that a compliant token should implement, such as `transfer`, `transferFrom`, `approve`, `allowance`, `balanceOf`, `totalSupply`, as well as the `Transfer` and `Approval` events.

The `finishMinting` function does not directly violate the ERC-20 standard because the standard does not cover the minting process. However, it is important to note that once `mintingFinished` is set to `true`, if the contract does not handle the minting process correctly, it could potentially violate the standard indirectly. For example, if the contract allows new tokens to be minted after `mintingFinished` is set to `true`, it would be creating tokens out of thin air without proper accounting, which would violate the principle of token conservation implied by the `totalSupply` function.

Additionally, the `MintFinished` event is not part of the ERC-20 standard. While it is not a violation to include additional events, it is important to ensure that any additional functionality does not conflict with the standard's requirements or expectations.

In conclusion, the `finishMinting` function itself does not violate the ERC-20 standard, but care must be taken to ensure that the overall contract, including the minting process, adheres to the standard's rules regarding token supply and transferability. If the contract is meant to be ERC-20 compliant, it should implement all the required functions and events as specified by the standard, and any additional functionality should not interfere with these core features.