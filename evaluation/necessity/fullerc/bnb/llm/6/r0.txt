The provided Solidity code for the `unfreeze` function and the related parts from the `BNB` contract do not directly violate the ERC-20 standard, as the ERC-20 standard does not specify anything about freezing or unfreezing tokens. The ERC-20 standard focuses on the transfer of tokens, allowances for third-party transfers, and the querying of token balances and total supply.

However, there are a few issues with the provided code that are worth mentioning:

1. The use of `throw` for error handling is outdated. Solidity now uses `require` and `revert` for error handling. The `throw` keyword has been deprecated and should be replaced with `require` statements that provide the same functionality with less gas consumption and the ability to return an error message.

2. The `unfreeze` function does not emit a `Transfer` event. According to the ERC-20 standard, a `Transfer` event must be triggered when tokens are transferred, including zero value transfers. Since unfreezing is conceptually similar to transferring tokens from a frozen state back to the user's balance, it would be expected to emit a `Transfer` event with the `_from` address set to `0x0` if the tokens are considered to be created or from the contract address if they are simply being unlocked.

3. The `unfreeze` function is not marked as `public` or `external`, which means it will default to `public`. However, it is good practice to explicitly state the visibility of functions.

4. The `unfreeze` function does not have a `view` or `pure` modifier, which is correct since it modifies the state. However, it should be noted that the function should be marked as `nonReentrant` if the contract uses the `ReentrancyGuard` from OpenZeppelin or a similar mechanism to prevent reentrancy attacks.

5. The `SafeMath` library functions are marked as `internal`, which is correct, but they should also be marked as `pure` since they do not read or modify the state.

6. The `SafeMath` library's `assert` function is used to throw an error if a condition is not met. This is an inefficient way to handle errors compared to using `require`, which should be used instead.

7. The `unfreeze` function does not return a value. In Solidity, it is necessary to specify the `return` statement when the function signature indicates a return type.

Here is a revised version of the `unfreeze` function with some of these issues addressed:

```solidity
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract BNB {
    using SafeMath for uint256;

    mapping(address => uint256) public freezeOf;
    mapping(address => uint256) public balanceOf;

    event Unfreeze(address indexed from, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function unfreeze(uint256 _value) public returns (bool success) {
        require(freezeOf[msg.sender] >= _value, "Insufficient frozen funds");
        require(_value > 0, "Value must be greater than 0");

        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);
        balanceOf[msg.sender] = balanceOf[msg.sender].add(_value);

        emit Unfreeze(msg.sender, _value);
        emit Transfer(address(0), msg.sender, _value); // Assuming tokens are 'created' when unfrozen

        return true;
    }
}
```

Please note that the `Transfer` event in the revised code assumes that the tokens are 'created' when unfrozen. If the tokens are not considered to be created but simply unlocked, the `from` address in the `Transfer` event should be the contract address instead of `address(0)`.

Lastly, it's important to remember that while the `unfreeze` function does not violate the ERC-20 standard, it introduces additional functionality that is not covered by the standard. Any additional functions or features should be clearly documented, and users of the token should be made aware of these non-standard features.