The provided Solidity code for the `totalSupply` function in the `Token` contract is not fully compliant with the ERC-20 token standard as described in the provided ERC documentation. Here are the issues with the provided `totalSupply` function:

1. Visibility Modifier: The ERC-20 standard specifies that the `totalSupply` function should be a `public` function, but the provided code does not specify the visibility. In Solidity, functions are `public` by default, but it is considered good practice to explicitly state the visibility for clarity.

2. View Modifier: The ERC-20 standard specifies that the `totalSupply` function should be a `view` function, which means it should not modify the state and should only read data. The provided code uses the `constant` keyword, which is an alias for `view` in older versions of Solidity. However, it is recommended to use the `view` keyword for newer Solidity versions (0.4.17 or above) to be explicit and clear.

3. Return Value Naming: The ERC-20 standard does not require the return value to be named. Naming the return value as `supply` is optional and does not affect the compliance with the standard. However, it is not necessary and can be omitted for simplicity.

4. Return Value Documentation: The ERC-20 standard does not require the use of NatSpec comments (e.g., `/// @return total amount of tokens`) for the `totalSupply` function. While documentation is helpful, it is not part of the standard's compliance requirements.

Here is an updated version of the `totalSupply` function that would be compliant with the ERC-20 standard:

```solidity
pragma solidity ^0.4.17;

contract Token {
    uint256 private _totalSupply;

    // Returns the total token supply.
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // Other ERC-20 functions and events...
}
```

In this updated version, the `totalSupply` function is explicitly marked as `public` and `view`, and the return value is not named. Additionally, the function should be part of a contract that includes the other required ERC-20 functions and events to be fully compliant with the standard.