The provided `transferFrom` function in the `StandardToken` contract appears to be an implementation of the ERC20 token standard's `transferFrom` method. To determine if the function violates the given ERC, we need to compare it against the ERC20 specification provided.

Here are the key points from the ERC20 specification for the `transferFrom` method:

1. Transfers `_value` amount of tokens from address `_from` to address `_to`.
2. MUST fire the `Transfer` event.
3. The function SHOULD throw unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
4. Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.

Now, let's analyze the provided `transferFrom` function:

```solidity
function transferFrom(
    address _from,
    address _to,
    uint256 _value
) returns (bool success) {
    if (
        balances[_from] >= _value &&
        allowed[_from][msg.sender] >= _value &&
        _value > 0
    ) {
        balances[_to] += _value;
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    } else {
        return false;
    }
}
```

The function checks if the `_from` address has enough balance and if the `msg.sender` is authorized to spend the specified `_value` from `_from`'s balance. If both conditions are met and `_value` is greater than 0, it performs the transfer, updates the balances, reduces the allowance, emits the `Transfer` event, and returns `true`.

However, there are a couple of issues with this implementation when compared to the ERC20 specification:

1. The function should not return `false` on failure but should throw/revert instead. This is because the ERC20 standard states that the function SHOULD throw if the conditions are not met. The use of `require` statements is more appropriate to ensure that the function reverts on failure.

2. The function has a condition `_value > 0`, which means it will return `false` if `_value` is 0. According to the ERC20 specification, transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event. This implementation would not allow a transfer of 0 value and would not emit the `Transfer` event in such a case, which is a violation of the ERC20 standard.

To comply with the ERC20 standard, the `transferFrom` function should be modified to remove the `_value > 0` check and to use `require` statements to ensure that the function reverts on failure instead of returning `false`. Additionally, the `Transfer` event should be emitted for transfers of 0 value as well.