The provided Solidity function interfaces are being compared to the ERC-20 token standard, which is the most common standard for Ethereum tokens. The ERC-20 standard specifies a minimal set of functions and events that a compliant token contract must implement to enable interoperability across different applications and platforms.

Here's a breakdown of the provided interfaces and whether they comply with the ERC-20 standard:

1. `constructor() returns()` - Not part of ERC-20, but it's a standard constructor for contract initialization.
2. `getWallet(address) returns(address,bool)` - Not part of ERC-20.
3. `setAccount(address) returns(bool)` - Not part of ERC-20.
4. `balanceOf(address) returns(uint256)` - Compliant with ERC-20.
5. `transfer(address,uint256) returns(bool)` - Compliant with ERC-20.
6. `allowance(address,address) returns(uint256)` - Compliant with ERC-20.
7. `transferFrom(address,address,uint256) returns(bool)` - Compliant with ERC-20.
8. `approve(address,uint256) returns(bool)` - Compliant with ERC-20.
9. `mint(uint256) returns(bool)` - Not part of ERC-20, but commonly used in mintable token contracts.
10. `burn(uint256) returns(bool)` - Not part of ERC-20, but commonly used in burnable token contracts.
11. `lockAccount(address) returns(bool)` - Not part of ERC-20.
12. `unlockAccount(address) returns(bool)` - Not part of ERC-20.
13. `reduceToken(address,uint256) returns(bool)` - Not part of ERC-20.
14. `name() returns(string)` - Compliant with ERC-20 (optional).
15. `symbol() returns(string)` - Compliant with ERC-20 (optional).
16. `decimals() returns(uint256)` - Compliant with ERC-20 (optional), but should return `uint8` instead of `uint256`.
17. `owner() returns(address)` - Not part of ERC-20.
18. `totalSupply() returns(uint256)` - Compliant with ERC-20.

The ERC-20 standard also requires two events:
- `event Transfer(address indexed _from, address indexed _to, uint256 _value)`
- `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`

These events are not listed in the provided interfaces, but they are essential for ERC-20 compliance. The contract must emit these events in the corresponding functions (`transfer`, `transferFrom`, and `approve`).

In summary, the provided list of functions includes several that are not part of the ERC-20 standard (`getWallet`, `setAccount`, `mint`, `burn`, `lockAccount`, `unlockAccount`, `reduceToken`, `owner`). Additionally, the `decimals` function should return `uint8` instead of `uint256` to be fully compliant. The contract also needs to include the `Transfer` and `Approval` events to meet the ERC-20 specification.

It's important to note that having additional functions beyond the ERC-20 standard does not necessarily mean the token is non-compliant; however, the core ERC-20 functions and events must be implemented correctly for the token to be considered ERC-20 compliant.