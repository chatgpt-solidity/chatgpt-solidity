The provided Solidity code for the `mint` function and related parts of the `JNTR` contract do not fully comply with the ERC-20 token standard as described in the provided ERC excerpt. Here are the issues:

1. **Minting Event**: According to the ERC-20 standard, a `Transfer` event must be triggered when tokens are transferred, including when new tokens are created (minted). The `mint` function in the provided code does not emit a `Transfer` event with the `_from` address set to `0x0` when new tokens are created. This is a requirement to be compliant with the ERC-20 standard.

2. **Access Control**: The `mint` function is only restricted by the requirement that `msg.sender` must be the `owner`. While this is a common pattern for controlling who can mint new tokens, the ERC-20 standard itself does not specify access control mechanisms for minting. However, it is important to note that minting is not part of the ERC-20 standard, and any minting functionality is an extension beyond the standard. Therefore, while the access control does not violate the standard, the minting functionality itself is an addition to the standard.

3. **Return Value**: The ERC-20 standard specifies that functions should return a boolean value to indicate success. The `mint` function correctly returns a boolean value, so this aspect is compliant.

4. **SafeMath**: The use of `SafeMath` for arithmetic operations is a good practice to prevent overflows and underflows, and it does not violate the ERC-20 standard.

5. **Total Supply**: The `totalSupply` variable is updated correctly in the `mint` function, which is consistent with the behavior expected when minting new tokens. However, the ERC-20 standard does not define a `mint` function, so this is an extension of the standard.

6. **Function Visibility**: The ERC-20 standard does not specify the visibility of functions. However, it is a common practice to make functions like `mint` internal or restricted to certain roles to prevent unauthorized minting. The provided code restricts minting to the `owner`, which is a form of access control.

7. **Missing ERC-20 Functions**: The provided code snippet does not include the full set of required ERC-20 functions such as `transfer`, `transferFrom`, `approve`, and `allowance`. To be fully ERC-20 compliant, the contract must implement all of these functions and their associated events.

In summary, the `mint` function in the provided `JNTR` contract does not emit the required `Transfer` event when minting new tokens, which is a violation of the ERC-20 standard. Additionally, the minting functionality itself is not part of the ERC-20 standard and represents an extension to the standard. To be fully compliant, the contract would need to implement all required functions and events as specified by ERC-20, and it would need to emit a `Transfer` event when minting new tokens.