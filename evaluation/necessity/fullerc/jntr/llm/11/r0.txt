The `unlockAccount` function in the provided Solidity code does not directly relate to the ERC-20 standard. ERC-20 is a standard for fungible tokens and specifies a set of methods and events that a compliant token contract must implement. The standard includes methods for transferring tokens, querying balances, and allowing tokens to be spent by approved third parties.

The `unlockAccount` function seems to be a custom function that is not part of the ERC-20 standard. It is designed to change the state of an account within the contract, presumably to "unlock" it for some purpose not specified in the provided code snippet. This function does not interact with the token balance, transfer functionality, or approval mechanism defined by ERC-20.

However, there are a few points to consider regarding compliance and best practices:

1. **Access Control**: The function requires that `msg.sender` is the `owner` of the contract. This is a form of access control, which is not specified by ERC-20 but is a common practice in smart contract development to restrict certain functions to privileged users.

2. **State Modification**: The function modifies the state of an account by setting `_active` to `true`. This is not part of the ERC-20 standard, but it does not conflict with it either, as long as it does not affect the token's transferability and other ERC-20 functions.

3. **Return Value**: The function returns a boolean value, which is consistent with the ERC-20 standard's requirement that functions like `transfer`, `approve`, and `transferFrom` return a boolean to indicate success or failure.

4. **Events**: The ERC-20 standard requires that certain events (`Transfer` and `Approval`) be emitted when tokens are transferred or approved. Since `unlockAccount` does not deal with token transfers or approvals, it does not need to emit these events.

In conclusion, the `unlockAccount` function does not violate the ERC-20 standard, as it does not interfere with the standard's required methods and events. It appears to be a custom administrative function that is separate from the token functionality specified by ERC-20. However, it is important to ensure that the implementation of such custom functions does not inadvertently affect the ERC-20 token behavior, such as by preventing transfers or affecting balances in a way that is not compliant with the standard.