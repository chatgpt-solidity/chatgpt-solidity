The provided Solidity code for the `transferFrom` function and related parts of the contract must be evaluated against the ERC-20 token standard to determine if there are any violations. Let's go through the ERC-20 specification and compare it with the provided code:

1. **transferFrom Function**: The ERC-20 standard specifies that the `transferFrom` function should transfer `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event. The function SHOULD throw unless the `_from` account has deliberately authorized the sender of the message via some mechanism.

    The provided `transferFrom` function in the code does the following:
    - Verifies the transaction using `verifyTransaction`, which checks if both the sender and receiver are allowed addresses and active.
    - Checks if the `_value` is greater than 0.
    - Checks if the sender (`msg.sender`) is authorized to spend at least `_value` tokens from `_from` and that `_from` has enough balance.
    - Subtracts `_value` from `_from`'s balance and adds it to `_to`'s balance.
    - Decreases the allowance by `_value`.
    - Emits the `Transfer` event.

    The code seems to follow the ERC-20 standard for the `transferFrom` function, with the additional requirement that both the sender and receiver must be verified through `verifyTransaction`. This is not part of the ERC-20 standard, but it does not violate the standard as long as the function behaves correctly when the conditions are met.

2. **SafeMath Library**: The contract uses a `SafeMath` library for safe arithmetic operations, which is a common practice to prevent overflow and underflow issues. This is not specified in the ERC-20 standard, but it is a good security practice and does not violate the standard.

3. **Events**: The code correctly emits the `Transfer` event after a successful token transfer, which is in line with the ERC-20 standard.

4. **Additional Checks**: The code includes additional checks such as `require(_value > 0);` which is not required by the ERC-20 standard, as transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event. This additional check does not violate the standard, but it does deviate from the typical ERC-20 implementation where 0-value transfers are allowed.

5. **Error Handling**: The ERC-20 standard mentions that callers MUST handle false from returns (bool success) and MUST NOT assume that false is never returned. The provided code uses `require` statements for error handling, which will revert the transaction and consume all provided gas if a condition is not met. This is a common practice and does not violate the standard.

In conclusion, the provided `transferFrom` function and related parts of the contract do not violate the ERC-20 standard. However, they include additional checks and requirements (such as active and allowed addresses) that are not part of the standard. These additional features must be clearly documented and understood by users of the token, as they could affect the token's interoperability with other contracts and services expecting a standard ERC-20 implementation.