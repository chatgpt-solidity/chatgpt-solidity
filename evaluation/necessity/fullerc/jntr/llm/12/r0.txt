The `reduceToken` function in the provided Solidity code is not compliant with the ERC-20 standard for several reasons:

1. **Unexpected Behavior**: The ERC-20 standard defines a set of functions and events that must be implemented in a specific way. The `reduceToken` function is not part of the ERC-20 standard and introduces behavior that is not expected in a standard ERC-20 token. It allows the owner of the contract to reduce the balance of any address and credit the removed tokens to the owner's balance. This is not a behavior that is defined or allowed by the ERC-20 standard.

2. **Transfer Event**: While the `reduceToken` function does emit a `Transfer` event, which is part of the ERC-20 standard, the use of this event in this context is misleading. The `Transfer` event should only be emitted when tokens are transferred in a standard way (i.e., through the `transfer` or `transferFrom` functions). The `reduceToken` function is effectively confiscating tokens, which is not a standard transfer operation.

3. **Authorization**: The ERC-20 standard requires that the `transferFrom` function should only move tokens if the sender has been authorized by the token holder (via the `approve` function). The `reduceToken` function bypasses any such authorization checks, allowing the owner to unilaterally reduce someone's balance without their permission.

4. **Security and Ownership**: The function requires that the caller is the `owner` of the contract. This centralizes control and introduces a significant security risk, as the owner has the power to reduce the balance of any token holder. This is not in line with the decentralized nature of ERC-20 tokens, where no single party should have such control over the tokens of others.

5. **Lack of Return Value Handling**: The ERC-20 standard specifies that callers must handle false returns from functions. However, the `reduceToken` function does not return a boolean indicating success or failure, it simply returns `true` unconditionally. This does not align with the standard's requirement for proper return value handling.

In conclusion, the `reduceToken` function and the related parts of the contract violate the ERC-20 standard by introducing non-standard behavior, potential security risks, and centralization of control. This function would not be expected or acceptable in a standard ERC-20 token implementation.