The `balanceOf` function provided in the `DSTokenBase` contract appears to be compliant with the ERC20 standard as described in the ERC excerpt you provided. The ERC20 standard specifies that the `balanceOf` function should:

- Accept an address as a parameter (referred to as `_owner` in the ERC, and as `src` in the provided code).
- Return the balance of the specified address as a `uint256`.

The provided `balanceOf` function in the `DSTokenBase` contract does exactly that:

```solidity
function balanceOf(address src) public view returns (uint) {
    return _balances[src];
}
```

It takes an address (`src`) as an input and returns the balance of that address from the `_balances` mapping, which is a `uint256`. The return type `uint` is an alias for `uint256` in Solidity, so it matches the ERC20 specification.

There are no apparent violations of the ERC20 standard in the provided `balanceOf` function. However, it's important to note that the rest of the contract would also need to be reviewed to ensure full compliance with ERC20, including the implementation of other required functions and events such as `transfer`, `transferFrom`, `approve`, `allowance`, `Transfer`, and `Approval`.

Additionally, the contract should handle edge cases and security considerations as mentioned in the ERC20 standard, such as preventing transfers when the balance is insufficient and following best practices for the `approve` function to mitigate potential attack vectors.

Without the full contract code, it's not possible to determine if the entire contract is ERC20 compliant, but the `balanceOf` function itself does not violate the ERC20 standard based on the information provided.