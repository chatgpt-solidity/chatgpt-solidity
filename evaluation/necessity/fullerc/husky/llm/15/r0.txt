The `isExcluded` function in the provided Solidity code is not part of the ERC-20 standard. The ERC-20 standard specifies a set of functions and events that a compliant token contract must implement, and `isExcluded` is not one of them.

However, the presence of an `isExcluded` function does not necessarily mean that the contract violates the ERC-20 standard. The ERC-20 standard allows for additional functions and mechanisms to be included in a token contract as long as the required functions and events are correctly implemented and behave as specified.

The `isExcluded` function appears to be a custom function that is likely used to manage a list of addresses that are excluded from certain operations or tokenomics features, such as fee-less transfers, rewards, or other special treatments. This is a common practice in many token contracts that aim to provide additional features beyond the basic ERC-20 functionality.

To determine if the contract is ERC-20 compliant, you would need to review the implementation of the following functions and events:

- `totalSupply()`
- `balanceOf(address _owner)`
- `transfer(address _to, uint256 _value)`
- `transferFrom(address _from, address _to, uint256 _value)`
- `approve(address _spender, uint256 _value)`
- `allowance(address _owner, address _spender)`
- `Transfer` event
- `Approval` event

If these functions and events are implemented according to the ERC-20 specification and the contract behaves as expected, then the contract can be considered ERC-20 compliant, even with the addition of the `isExcluded` function or other non-standard features.

In summary, the `isExcluded` function does not violate the ERC-20 standard as long as the standard's required functions and events are correctly implemented. It is an additional feature that does not interfere with the core ERC-20 functionality.