The provided Solidity function `transfer` is intended to be part of an ERC-20 token contract, which is a standard interface for Ethereum tokens. To determine if the function complies with the ERC-20 standard, we need to compare it against the ERC-20 specification provided.

Here is the `transfer` function from the provided code:

```solidity
function transfer(address _to, uint256 _value) returns (bool success) {
    if (balances[msg.sender] >= _value && _value > 0) {
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    } else {
        return false;
    }
}
```

And here is the relevant part of the ERC-20 specification for the `transfer` function:

```
transfer
Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message callerâ€™s account balance does not have enough tokens to spend. 
Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.
function transfer(address _to, uint256 _value) public returns (bool success)
```

Upon reviewing the provided `transfer` function against the ERC-20 specification, we can identify the following issues:

1. **Throwing on Failure**: The ERC-20 standard states that the function SHOULD throw if the caller's balance does not have enough tokens to spend. In the provided code, instead of throwing an error, it returns `false`. This is a deviation from the standard's recommendation. However, the ERC-20 standard uses the word "SHOULD" which implies a recommendation rather than a strict requirement. Therefore, while it is not the best practice, it does not strictly violate the ERC-20 standard.

2. **Handling of 0 Value Transfers**: The ERC-20 standard specifies that transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event. The provided code does not explicitly handle the case of `_value` being 0; however, it does not prevent it either. If `_value` is 0 and the sender has a non-negative balance, the transfer will proceed, and the `Transfer` event will be fired, which is compliant with the standard.

3. **Visibility and Return Type**: The provided function does not specify the visibility (e.g., `public`, `external`). In Solidity, functions are `public` by default, but it is considered good practice to explicitly state the visibility. Additionally, the return type should be explicitly stated as `public` to match the ERC-20 specification.

4. **Event Declaration**: The ERC-20 standard requires a `Transfer` event to be declared. The provided code snippet does not include the event declaration, but it does show the event being emitted. We must assume that the event is declared elsewhere in the contract for the code to be compliant.

5. **Modifiers**: The provided function does not include any function modifiers (e.g., `public`). In Solidity, functions are `public` by default, but it is considered best practice to explicitly state the visibility.

To summarize, the provided `transfer` function does not strictly violate the ERC-20 standard, but it does deviate from best practices by not throwing on failure and not explicitly stating function visibility. It is also assumed that the `Transfer` event is declared elsewhere in the contract. It is recommended to update the function to throw an error on failure and to explicitly declare the visibility and return type to align with best practices and improve clarity.